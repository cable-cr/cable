{"repository_name":"cable","body":"# Cable\n\n[![ci workflow](https://github.com/cable-cr/cable/actions/workflows/ci.yml/badge.svg)](https://github.com/cable-cr/cable/actions/workflows/ci.yml)\n\nIt's like [ActionCable](https://guides.rubyonrails.org/action_cable_overview.html) (100% compatible with JS Client), but you know, for Crystal\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     cable:\n       github: cable-cr/cable\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"cable\"\n```\n\n### Lucky example\n\nOn your `src/app_server.cr` add the `Cable::Handler` before `Lucky::RouteHandler`\n\n```crystal\nclass AppServer < Lucky::BaseAppServer\n  def middleware\n    [\n      Cable::Handler(ApplicationCable::Connection).new, # place before the middleware below\n      Honeybadger::Handler.new,\n      Lucky::ErrorHandler.new(action: Errors::Show),\n      Lucky::RouteHandler.new,\n    ]\n   end\nend\n```\n\nAfter that, you can configure your `Cable`, the defaults are:\n\n```crystal\nCable.configure do |settings|\n  settings.route = \"/cable\"    # the URL your JS Client will connect\n  settings.token = \"token\"     # The query string parameter used to get the token\nend\n```\n\nYou may want to tune how to report logging\n\n```crystal\n# config/log.cr\n\nlog_levels = {\n  \"debug\" => Log::Severity::Debug,\n  \"info\"  => Log::Severity::Info,\n  \"error\" => Log::Severity::Error,\n}\n\n# use the `CABLE_DEBUG_LEVEL` env var to choose any of the 3 log levels above\nCable::Logger.level = log_levels[ENV.fetch(\"CABLE_DEBUG_LEVEL\", \"info\")]\n```\n\nThen you need to implement a few classes\n\nThe connection class is how you are gonna handle connections, it's referenced on the `src/app_server.cr` when creating the handler.\n\n```crystal\nmodule ApplicationCable\n  class Connection < Cable::Connection\n    # You need to specify how you identify the class, using something like:\n    # Remembering that it must, be a String\n    # Tip: Use your `User#id` converted to String\n    identified_by :identifier\n\n    # If you'd like to keep a `User` instance together with the Connection, so\n    # there's no need to fetch from the database all the time, you can use the\n    # `owned_by` instruction\n    owned_by current_user : User\n\n    def connect\n      UserToken.decode_user_id(token.to_s).try do |user_id|\n        self.identifier = user_id.to_s\n        self.current_user =  UserQuery.find(user_id)\n      end\n    end\n  end\nend\n```\n\nThen you need your base channel, just to make easy to aggregate your app's cables logic\n\n```crystal\nmodule ApplicationCable\n  class Channel < Cable::Channel\n  end\nend\n```\n\nThen create your cables, as much as your want!! Let's setup a `ChatChannel` as example:\n\n```crystal\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    # We don't support stream_for, needs to generate your own unique string\n    stream_from \"chat_#{params[\"room\"]}\"\n  end\n\n  def receive(data)\n    broadcast_message = {} of String => String\n    broadcast_message[\"message\"] = data[\"message\"].to_s\n    broadcast_message[\"current_user_id\"] = connection.identifier\n    ChatChannel.broadcast_to(\"chat_#{params[\"room\"]}\", broadcast_message)\n  end\n\n  def perform(action, action_params)\n    user = UserQuery.new.find(connection.identifier)\n    # Perform action on your user object. For example, you could manage\n    # its status by adding some .away and .status methods on it like below\n    # user.away if action == \"away\"\n    # user.status(action_params[\"status\"]) if action == \"status\"\n    ChatChannel.broadcast_to(\"chat_#{params[\"room\"]}\", {\n      \"user\"      => user.email,\n      \"performed\" => action.to_s,\n    })\n  end\n\n  def unsubscribed\n    # You can do any action after client closes connection\n    user = UserQuery.new.find(connection.identifier)\n\n    # You could for example call any method on your user like a .logout one\n    # user.logout\n  end\nend\n```\n\nReject channel subscription if the request is invalid:\n\n```crystal\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    reject if user_not_allowed_to_join_chat_room?\n\n    stream_from \"chat_#{params[\"room\"]}\"\n  end\nend\n```\n\nUse callbacks to perform actions or transmit messages once the connection/channel has been subscribed.\n\n```crystal\nclass ChatChannel < ApplicationCable::Channel\n  # you can name these callbacks anything you want...\n  # `after_subscribed` can accept 1 or more callbacks to be run in order\n  after_subscribed :broadcast_welcome_pack_to_single_subscribed_user,\n                   :announce_user_joining_to_everyone_else_in_the_channel,\n                   :process_some_stuff\n\n  def subscribed\n    stream_from \"chat_#{params[\"room\"]}\"\n  end\n\n  # If you want to ONLY send the current_user a message\n  # and none of the other subscribers\n  #\n  # use -> transmit(message), which accepts Hash(String, String) or String\n  def broadcast_welcome_pack_to_single_subscribed_user\n    transmit({ \"welcome_pack\" => \"some cool stuff for this single user\" })\n  end\n\n  # On the other hand,\n  # if you want to broadcast a message\n  # to all subscribers connected to this channel\n  #\n  # use -> broadcast(message), which accepts Hash(String, String) or String\n  def announce_user_joining_to_everyone_else_in_the_channel\n    broadcast(\"username xyz just joined\")\n  end\n\n  # you don't need to use transmit functionality\n  def process_some_stuff\n    send_welcome_email_to_user\n    update_their_profile\n  end\nend\n```\n\nCheck below on the JavaScript section how to communicate with the Cable backend\n\n## JavaScript\n\nIt works with [ActionCable](https://www.npmjs.com/package/actioncable) JS Client out-of-the-box!! Yeah, that's really cool no? If you need to adapt, make a hack, or something like that?!\n\nNo, you don't need! Just read the few lines below and start playing with Cable in 5 minutes!\n\n### ActionCable JS Example\n\n`/examples/action-cable-js-client.md`\n\n### Vanilla JS Examples\n\nIf you want to use this shard with an iOS clients or vanilla JS using react etc. there is an example in the `/examples` folder.\n\n> Note - If your using a vanilla - non action-cable JS client, you may want to disable the action cable response headers as they cause issues on the clients who don't know how to handle them. Set an Habitat disable_sec_websocket_protocol_header like so to disable those headers;\n\n```\n# config/cable.cr\n\nCable.configure do |settings|\n  settings.disable_sec_websocket_protocol_header = true\nend\n```\n\n## Debugging\n\nYou can create a json endpoint to ping your server and check how things are going.\n\n```crystal\n\n# src/actions/debug/index.cr\n\nclass Debug::Index < ApiAction\n  include RequireAuthToken\n\n  get \"/debug\" do\n    json(Cable.server.debug_json) # Cable.server.debug_json is provided by this shard\n  end\nend\n```\n\nAlternatively, you can ping redis directly using the redis-cli as follows;\n\n```bash\nPUBLISH _internal debug\n```\n\nThis will dump a debug status into your logs\n\n## TODO\n\nAfter reading the docs, I realized I'm using some weird naming for variables / methods, so\n\n- [x] Need to make connection use identifier\n- [x] Add `identified_by identifier` to `Cable::Connection`\n- [x] Give better methods to reject a connection\n- [x] Refactor, Connection class is soooo bloated\n- [ ] Add an async/local adapter (make tests, development and small deploys simpler)\n\n## First Class Citizen\n\n- [ ] Better integrate with Lucky, maybe with generators, or something else?\n- [ ] Add support for Kemal\n- [ ] Add support for Amber\n\nIdea is create different modules, `Cable::Lucky`, `Cable::Kemal`, `Cable::Amber`, and make it easy to use with any crystal web framework\n\n## Contributing\n\nYou know, fork-branch-push-pr ðŸ˜‰ don't be shy, participate as you want!\n","program":{"html_id":"cable/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cable","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cable/Cable","path":"Cable.html","kind":"module","full_name":"Cable","name":"Cable","abstract":false,"superclass":null,"ancestors":[{"html_id":"cable/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"cable/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: route : String = Cable.message(:default_mount_path), example: \"/cable\", validation: nil}, {decl: token : String = \"token\", example: \"token\", validation: nil}, {decl: url : String = ENV.fetch(\"REDIS_URL\", \"redis://localhost:6379\"), example: \"redis://localhost:6379\", validation: nil}, {decl: disable_sec_websocket_protocol_header : Bool = false, example: nil, validation: nil}] of Nil","doc":null,"summary":null},{"id":"INTERNAL","name":"INTERNAL","value":"{message_types: {welcome: \"welcome\", disconnect: \"disconnect\", ping: \"ping\", confirmation: \"confirm_subscription\", rejection: \"reject_subscription\", unsubscribe: \"confirm_unsubscription\"}, disconnect_reasons: {unauthorized: \"unauthorized\", invalid_request: \"invalid_request\", server_restart: \"server_restart\"}, default_mount_path: \"/cable\", protocols: [\"actioncable-v1-json\", \"actioncable-unsupported\"]}","doc":null,"summary":null},{"id":"Logger","name":"Logger","value":"Log.for(self)","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[{"html_id":"cable/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"cable/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"TODO: Write documentation for `Cable`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"Cable.html\">Cable</a></code></p>","class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/cable.cr","line_number":28,"url":null},"def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"message(event:Symbol)-class-method","html_id":"message(event:Symbol)-class-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Symbol"}],"args_string":"(event : Symbol)","args_html":"(event : Symbol)","location":{"filename":"src/cable.cr","line_number":35,"url":null},"def":{"name":"message","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"INTERNAL[:message_types][event]"}},{"id":"restart-class-method","html_id":"restart-class-method","name":"restart","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/server.cr","line_number":11,"url":null},"def":{"name":"restart","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if current_server = @@server\n  current_server.shutdown\nend\n@@server = Server.new\n"}},{"id":"server-class-method","html_id":"server-class-method","name":"server","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/server.cr","line_number":7,"url":null},"def":{"name":"server","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@server || (@@server = Server.new)"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable.cr","line_number":28,"url":null},"def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HabitatSettings"}}],"constructors":[],"instance_methods":[{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable.cr","line_number":28,"url":null},"def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HabitatSettings"}}],"macros":[],"types":[{"html_id":"cable/Cable/Channel","path":"Cable/Channel.html","kind":"class","full_name":"Cable::Channel","name":"Channel","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"CHANNELS","name":"CHANNELS","value":"{} of String => Cable::Channel.class","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[{"id":"broadcast_to(channel:String,message:JSON::Any)-class-method","html_id":"broadcast_to(channel:String,message:JSON::Any)-class-method","name":"broadcast_to","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"JSON::Any"}],"args_string":"(channel : String, message : JSON::Any)","args_html":"(channel : String, message : JSON::Any)","location":{"filename":"src/cable/channel.cr","line_number":59,"url":null},"def":{"name":"broadcast_to","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"JSON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] Broadcasting to #{channel}: #{message}\"\nend\nCable.server.publish(channel, message.to_json)\n"}},{"id":"broadcast_to(channel:String,message:String)-class-method","html_id":"broadcast_to(channel:String,message:String)-class-method","name":"broadcast_to","doc":"It's important that we don't call message.to_json","summary":"<p>It's important that we don't call message.to_json</p>","abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","args_html":"(channel : String, message : String)","location":{"filename":"src/cable/channel.cr","line_number":65,"url":null},"def":{"name":"broadcast_to","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] Broadcasting to #{channel}: #{message}\"\nend\nCable.server.publish(channel, message)\n"}},{"id":"broadcast_to(channel:String,message:Hash(String,String))-class-method","html_id":"broadcast_to(channel:String,message:Hash(String,String))-class-method","name":"broadcast_to","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Hash(String, String)"}],"args_string":"(channel : String, message : Hash(String, String))","args_html":"(channel : String, message : Hash(String, String))","location":{"filename":"src/cable/channel.cr","line_number":70,"url":null},"def":{"name":"broadcast_to","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] Broadcasting to #{channel}: #{message}\"\nend\nCable.server.publish(channel, message.to_json)\n"}}],"constructors":[{"id":"new(connection:Cable::Connection,identifier:String,params:Hash(String,Cable::Payload::RESULT))-class-method","html_id":"new(connection:Cable::Connection,identifier:String,params:Hash(String,Cable::Payload::RESULT))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Cable::Connection"},{"name":"identifier","doc":null,"default_value":"","external_name":"identifier","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, Cable::Payload::RESULT)"}],"args_string":"(connection : Cable::Connection, identifier : String, params : Hash(String, Cable::Payload::RESULT))","args_html":"(connection : <a href=\"../Cable/Connection.html\">Cable::Connection</a>, identifier : String, params : Hash(String, <a href=\"../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>))","location":{"filename":"src/cable/channel.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Cable::Connection"},{"name":"identifier","doc":null,"default_value":"","external_name":"identifier","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, Cable::Payload::RESULT)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(connection, identifier, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"broadcast(message:String)-instance-method","html_id":"broadcast(message:String)-instance-method","name":"broadcast","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/cable/channel.cr","line_number":75,"url":null},"def":{"name":"broadcast","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if stream_identifier.nil?\n  Cable::Logger.error do\n    \"#{self.class}.transmit(message : String) with #{message} without already using stream_from(stream_identifier)\"\n  end\nelse\n  Cable::Logger.info do\n    \"[ActionCable] Broadcasting to #{self.class}: #{message}\"\n  end\n  Cable.server.send_to_channels(stream_identifier.not_nil!, message)\nend"}},{"id":"broadcast(message:JSON::Any)-instance-method","html_id":"broadcast(message:JSON::Any)-instance-method","name":"broadcast","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"JSON::Any"}],"args_string":"(message : JSON::Any)","args_html":"(message : JSON::Any)","location":{"filename":"src/cable/channel.cr","line_number":84,"url":null},"def":{"name":"broadcast","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"JSON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if stream_identifier.nil?\n  Cable::Logger.error do\n    \"#{self.class}.transmit(message : JSON::Any) with #{message} without already using stream_from(stream_identifier)\"\n  end\nelse\n  Cable::Logger.info do\n    \"[ActionCable] Broadcasting to #{self.class}: #{message}\"\n  end\n  Cable.server.send_to_channels(stream_identifier.not_nil!, message)\nend"}},{"id":"broadcast(message:Hash(String,String))-instance-method","html_id":"broadcast(message:Hash(String,String))-instance-method","name":"broadcast","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Hash(String, String)"}],"args_string":"(message : Hash(String, String))","args_html":"(message : Hash(String, String))","location":{"filename":"src/cable/channel.cr","line_number":93,"url":null},"def":{"name":"broadcast","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if stream_identifier.nil?\n  Cable::Logger.error do\n    \"#{self.class}.transmit(message : Hash(String, String)) with #{message} without already using stream_from(stream_identifier)\"\n  end\nelse\n  Cable::Logger.info do\n    \"[ActionCable] Broadcasting to #{self.class}: #{message}\"\n  end\n  Cable.server.send_to_channels(stream_identifier.not_nil!, message.to_json)\nend"}},{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/channel.cr","line_number":40,"url":null},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @stream_identifier.nil?\nelse\n  Cable.server.unsubscribe_channel(channel: self, identifier: @stream_identifier.not_nil!)\nend\nCable::Logger.info do\n  \"#{self.class.name} stopped streaming from #{identifier}\"\nend\nunsubscribed\n"}},{"id":"connection:Cable::Connection-instance-method","html_id":"connection:Cable::Connection-instance-method","name":"connection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Cable::Connection","args_html":" : <a href=\"../Cable/Connection.html\">Cable::Connection</a>","location":{"filename":"src/cable/channel.cr","line_number":26,"url":null},"def":{"name":"connection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connection"}},{"id":"identifier:String-instance-method","html_id":"identifier:String-instance-method","name":"identifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cable/channel.cr","line_number":25,"url":null},"def":{"name":"identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@identifier"}},{"id":"params:Hash(String,Cable::Payload::RESULT)-instance-method","html_id":"params:Hash(String,Cable::Payload::RESULT)-instance-method","name":"params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Cable::Payload::RESULT)","args_html":" : Hash(String, <a href=\"../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>)","location":{"filename":"src/cable/channel.cr","line_number":24,"url":null},"def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params"}},{"id":"perform(action,message)-instance-method","html_id":"perform(action,message)-instance-method","name":"perform","doc":null,"summary":null,"abstract":false,"args":[{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(action, message)","args_html":"(action, message)","location":{"filename":"src/cable/channel.cr","line_number":52,"url":null},"def":{"name":"perform","args":[{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"receive(message)-instance-method","html_id":"receive(message)-instance-method","name":"receive","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","args_html":"(message)","location":{"filename":"src/cable/channel.cr","line_number":49,"url":null},"def":{"name":"receive","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"reject-instance-method","html_id":"reject-instance-method","name":"reject","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/channel.cr","line_number":33,"url":null},"def":{"name":"reject","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@subscription_rejected = true"}},{"id":"run_after_subscribed_callbacks-instance-method","html_id":"run_after_subscribed_callbacks-instance-method","name":"run_after_subscribed_callbacks","doc":"@override in after_subscribed macro","summary":"<p>@override in after_subscribed macro</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/channel.cr","line_number":12,"url":null},"def":{"name":"run_after_subscribed_callbacks","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"stream_from(stream_identifier)-instance-method","html_id":"stream_from(stream_identifier)-instance-method","name":"stream_from","doc":null,"summary":null,"abstract":false,"args":[{"name":"stream_identifier","doc":null,"default_value":"","external_name":"stream_identifier","restriction":""}],"args_string":"(stream_identifier)","args_html":"(stream_identifier)","location":{"filename":"src/cable/channel.cr","line_number":55,"url":null},"def":{"name":"stream_from","args":[{"name":"stream_identifier","doc":null,"default_value":"","external_name":"stream_identifier","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stream_identifier = stream_identifier"}},{"id":"stream_identifier:String?-instance-method","html_id":"stream_identifier:String?-instance-method","name":"stream_identifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/cable/channel.cr","line_number":27,"url":null},"def":{"name":"stream_identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@stream_identifier"}},{"id":"subscribed-instance-method","html_id":"subscribed-instance-method","name":"subscribed","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/channel.cr","line_number":37,"url":null},"def":{"name":"subscribed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"subscription_rejected?:Bool-instance-method","html_id":"subscription_rejected?:Bool-instance-method","name":"subscription_rejected?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cable/channel.cr","line_number":28,"url":null},"def":{"name":"subscription_rejected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@subscription_rejected"}},{"id":"transmit(message:JSON::Any)-instance-method","html_id":"transmit(message:JSON::Any)-instance-method","name":"transmit","doc":"broadcast single message to single connection for this channel","summary":"<p>broadcast single message to single connection for this channel</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"JSON::Any"}],"args_string":"(message : JSON::Any)","args_html":"(message : JSON::Any)","location":{"filename":"src/cable/channel.cr","line_number":112,"url":null},"def":{"name":"transmit","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"JSON::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] transmitting to #{self.class}: #{message}\"\nend\nconnection.socket.send({identifier: identifier, message: Cable.server.safe_decode_message(message)}.to_json)\n"}},{"id":"transmit(message:String)-instance-method","html_id":"transmit(message:String)-instance-method","name":"transmit","doc":"broadcast single message to single connection for this channel","summary":"<p>broadcast single message to single connection for this channel</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/cable/channel.cr","line_number":103,"url":null},"def":{"name":"transmit","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] transmitting to #{self.class}: #{message}\"\nend\nconnection.socket.send({identifier: identifier, message: Cable.server.safe_decode_message(message)}.to_json)\n"}},{"id":"transmit(message:Hash(String,String))-instance-method","html_id":"transmit(message:Hash(String,String))-instance-method","name":"transmit","doc":"broadcast single message to single connection for this channel","summary":"<p>broadcast single message to single connection for this channel</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Hash(String, String)"}],"args_string":"(message : Hash(String, String))","args_html":"(message : Hash(String, String))","location":{"filename":"src/cable/channel.cr","line_number":121,"url":null},"def":{"name":"transmit","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] transmitting to #{self.class}: #{message}\"\nend\nconnection.socket.send({identifier: identifier, message: Cable.server.safe_decode_message(message)}.to_json)\n"}},{"id":"unsubscribed-instance-method","html_id":"unsubscribed-instance-method","name":"unsubscribed","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/channel.cr","line_number":46,"url":null},"def":{"name":"unsubscribed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"after_subscribed(*callbacks)-macro","html_id":"after_subscribed(*callbacks)-macro","name":"after_subscribed","doc":"Run `block` after the subscription is created.","summary":"<p>Run <code>block</code> after the subscription is created.</p>","abstract":false,"args":[{"name":"callbacks","doc":null,"default_value":"","external_name":"callbacks","restriction":""}],"args_string":"(*callbacks)","location":{"filename":"src/cable/channel.cr","line_number":16,"url":null},"def":{"name":"after_subscribed","args":[{"name":"callbacks","doc":null,"default_value":"","external_name":"callbacks","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"      def run_after_subscribed_callbacks\n        \n{% for callback in callbacks %}\n          {{ callback.id }}\n        {% end %}\n\n      \nend\n    \n"}}],"types":[{"html_id":"cable/Cable/Channel/CloseRedisFiber","path":"Cable/Channel/CloseRedisFiber.html","kind":"class","full_name":"Cable::Channel::CloseRedisFiber","name":"CloseRedisFiber","abstract":false,"superclass":{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable/Channel","kind":"class","full_name":"Cable::Channel","name":"Channel"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"cable/Cable/Channels","path":"Cable/Channels.html","kind":"alias","full_name":"Cable::Channels","name":"Channels","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":true,"aliased":"Set(Cable::Channel)","aliased_html":"Set(<a href=\"../Cable/Channel.html\">Cable::Channel</a>)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cable/Cable/Connection","path":"Cable/Connection.html","kind":"class","full_name":"Cable::Connection","name":"Connection","abstract":true,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"CHANNELS","name":"CHANNELS","value":"{} of String => Hash(String, Cable::Channel)","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[{"id":"broadcast_to(channel:String,message:String)-class-method","html_id":"broadcast_to(channel:String,message:String)-class-method","name":"broadcast_to","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","args_html":"(channel : String, message : String)","location":{"filename":"src/cable/connection.cr","line_number":149,"url":null},"def":{"name":"broadcast_to","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable.server.publish(channel, message)"}}],"constructors":[{"id":"new(request:HTTP::Request,socket:HTTP::WebSocket)-class-method","html_id":"new(request:HTTP::Request,socket:HTTP::WebSocket)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"},{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(request : HTTP::Request, socket : HTTP::WebSocket)","args_html":"(request : HTTP::Request, socket : HTTP::WebSocket)","location":{"filename":"src/cable/connection.cr","line_number":34,"url":null},"def":{"name":"new","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"},{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(request, socket)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/connection.cr","line_number":55,"url":null},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if Connection::CHANNELS.has_key?(connection_identifier)\nelse\n  return true\nend\nConnection::CHANNELS[connection_identifier].each do |identifier, channel|\n  begin\n    channel.close\n    Connection::CHANNELS[connection_identifier].delete(identifier)\n  rescue e : IO::Error\n    Cable::Logger.error do\n      \"IO::Error Exception: #{e.message} -> #{self.class.name}#close\"\n    end\n  end\nend\nCable::Logger.info do\n  \"Terminating connection #{connection_identifier}\"\nend\nsocket.close\n"}},{"id":"connect-instance-method","html_id":"connect-instance-method","name":"connect","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/connection.cr","line_number":49,"url":null},"def":{"name":"connect","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"connection_identifier:String-instance-method","html_id":"connection_identifier:String-instance-method","name":"connection_identifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cable/connection.cr","line_number":8,"url":null},"def":{"name":"connection_identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@connection_identifier"}},{"id":"connection_identifier=(connection_identifier:String)-instance-method","html_id":"connection_identifier=(connection_identifier:String)-instance-method","name":"connection_identifier=","doc":null,"summary":null,"abstract":false,"args":[{"name":"connection_identifier","doc":null,"default_value":"","external_name":"connection_identifier","restriction":"String"}],"args_string":"(connection_identifier : String)","args_html":"(connection_identifier : String)","location":{"filename":"src/cable/connection.cr","line_number":8,"url":null},"def":{"name":"connection_identifier=","args":[{"name":"connection_identifier","doc":null,"default_value":"","external_name":"connection_identifier","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connection_identifier = connection_identifier"}},{"id":"connection_rejected?:Bool-instance-method","html_id":"connection_rejected?:Bool-instance-method","name":"connection_rejected?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cable/connection.cr","line_number":11,"url":null},"def":{"name":"connection_rejected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@connection_rejected"}},{"id":"connection_requesting_duplicate_channel_subscription?(payload)-instance-method","html_id":"connection_requesting_duplicate_channel_subscription?(payload)-instance-method","name":"connection_requesting_duplicate_channel_subscription?","doc":"ensure we only allow subscribing to the same channel once from a connection","summary":"<p>ensure we only allow subscribing to the same channel once from a connection</p>","abstract":false,"args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":""}],"args_string":"(payload)","args_html":"(payload)","location":{"filename":"src/cable/connection.cr","line_number":111,"url":null},"def":{"name":"connection_requesting_duplicate_channel_subscription?","args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if connection_key = Connection::CHANNELS.dig?(connection_identifier, payload.identifier)\nelse\n  return\nend\nconnection_key.class.to_s == payload.channel\n"}},{"id":"id:UUID-instance-method","html_id":"id:UUID-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UUID","args_html":" : UUID","location":{"filename":"src/cable/connection.cr","line_number":13,"url":null},"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UUID","visibility":"Public","body":"@id"}},{"id":"identifier-instance-method","html_id":"identifier-instance-method","name":"identifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/connection.cr","line_number":18,"url":null},"def":{"name":"identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"internal_identifier"}},{"id":"internal_identifier:String-instance-method","html_id":"internal_identifier:String-instance-method","name":"internal_identifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cable/connection.cr","line_number":7,"url":null},"def":{"name":"internal_identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@internal_identifier"}},{"id":"internal_identifier=(internal_identifier:String)-instance-method","html_id":"internal_identifier=(internal_identifier:String)-instance-method","name":"internal_identifier=","doc":null,"summary":null,"abstract":false,"args":[{"name":"internal_identifier","doc":null,"default_value":"","external_name":"internal_identifier","restriction":"String"}],"args_string":"(internal_identifier : String)","args_html":"(internal_identifier : String)","location":{"filename":"src/cable/connection.cr","line_number":7,"url":null},"def":{"name":"internal_identifier=","args":[{"name":"internal_identifier","doc":null,"default_value":"","external_name":"internal_identifier","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@internal_identifier = internal_identifier"}},{"id":"message(payload:Cable::Payload)-instance-method","html_id":"message(payload:Cable::Payload)-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":133,"url":null},"def":{"name":"message","args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if channel = Connection::CHANNELS.dig?(connection_identifier, payload.identifier)\n  if payload.action?\n    Cable::Logger.info do\n      \"#{channel.class}#perform(\\\"#{payload.action}\\\", #{payload.data})\"\n    end\n    channel.perform(payload.action, payload.data)\n  else\n    begin\n      Cable::Logger.info do\n        \"#{channel.class}#receive(#{payload.data})\"\n      end\n      channel.receive(payload.data)\n    rescue e : TypeCastError\n      Cable::Logger.error do\n        \"Exception: #{e.message} -> #{self.class.name}#message(payload) { #{payload.inspect} }\"\n      end\n    end\n  end\nend"}},{"id":"receive(message)-instance-method","html_id":"receive(message)-instance-method","name":"receive","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","args_html":"(message)","location":{"filename":"src/cable/connection.cr","line_number":74,"url":null},"def":{"name":"receive","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"payload = Cable::Payload.new(message)\nif payload.command == \"subscribe\"\n  return subscribe(payload)\nend\nif payload.command == \"unsubscribe\"\n  return unsubscribe(payload)\nend\nif payload.command == \"message\"\n  return message(payload)\nend\n"}},{"id":"reject(payload:Cable::Payload)-instance-method","html_id":"reject(payload:Cable::Payload)-instance-method","name":"reject","doc":null,"summary":null,"abstract":false,"args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":125,"url":null},"def":{"name":"reject","args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if channel = Connection::CHANNELS[connection_identifier].delete(payload.identifier)\n  channel.unsubscribed\n  Cable::Logger.info do\n    \"#{channel.class.to_s} is transmitting the subscription rejection\"\n  end\n  socket.send({type: Cable.message(:rejection), identifier: payload.identifier}.to_json)\nend"}},{"id":"reject_connection!-instance-method","html_id":"reject_connection!-instance-method","name":"reject_connection!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/connection.cr","line_number":51,"url":null},"def":{"name":"reject_connection!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connection_rejected = true"}},{"id":"reject_unauthorized_connection-instance-method","html_id":"reject_unauthorized_connection-instance-method","name":"reject_unauthorized_connection","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/connection.cr","line_number":70,"url":null},"def":{"name":"reject_unauthorized_connection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(UnathorizedConnectionException.new)"}},{"id":"socket:HTTP::WebSocket-instance-method","html_id":"socket:HTTP::WebSocket-instance-method","name":"socket","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::WebSocket","args_html":" : HTTP::WebSocket","location":{"filename":"src/cable/connection.cr","line_number":12,"url":null},"def":{"name":"socket","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket"}},{"id":"started_at:Time-instance-method","html_id":"started_at:Time-instance-method","name":"started_at","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time","args_html":" : Time","location":{"filename":"src/cable/connection.cr","line_number":14,"url":null},"def":{"name":"started_at","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"@started_at"}},{"id":"subscribe(payload:Cable::Payload)-instance-method","html_id":"subscribe(payload:Cable::Payload)-instance-method","name":"subscribe","doc":null,"summary":null,"abstract":false,"args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":82,"url":null},"def":{"name":"subscribe","args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if connection_requesting_duplicate_channel_subscription?(payload)\n  return\nend\nchannel = Cable::Channel::CHANNELS[payload.channel].new(connection: self, identifier: payload.identifier, params: payload.channel_params)\n__temp_33 = connection_identifier\n__temp_34 = Connection::CHANNELS\n__temp_34[__temp_33]? || (__temp_34[__temp_33] = {} of String => Cable::Channel)\nConnection::CHANNELS[connection_identifier][payload.identifier] = channel\nchannel.subscribed\nif channel.subscription_rejected?\n  reject(payload)\n  return\nend\nif stream_identifier = channel.stream_identifier\n  Cable.server.subscribe_channel(channel: channel, identifier: stream_identifier)\n  Cable::Logger.info do\n    \"#{channel.class} is streaming from #{stream_identifier}\"\n  end\nend\nCable::Logger.info do\n  \"#{payload.channel} is transmitting the subscription confirmation\"\nend\nsocket.send({type: Cable.message(:confirmation), identifier: payload.identifier}.to_json)\nif channel.subscription_rejected?\nelse\n  channel.run_after_subscribed_callbacks\nend\n"}},{"id":"token:String?-instance-method","html_id":"token:String?-instance-method","name":"token","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/cable/connection.cr","line_number":10,"url":null},"def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@token"}},{"id":"unsubscribe(payload:Cable::Payload)-instance-method","html_id":"unsubscribe(payload:Cable::Payload)-instance-method","name":"unsubscribe","doc":null,"summary":null,"abstract":false,"args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":117,"url":null},"def":{"name":"unsubscribe","args":[{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":"Cable::Payload"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if channel = Connection::CHANNELS[connection_identifier].delete(payload.identifier)\n  channel.close\n  Cable::Logger.info do\n    \"#{payload.channel} is transmitting the unsubscribe confirmation\"\n  end\n  socket.send({type: Cable.message(:unsubscribe), identifier: payload.identifier}.to_json)\nend"}}],"macros":[{"id":"identified_by(name)-macro","html_id":"identified_by(name)-macro","name":"identified_by","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","location":{"filename":"src/cable/connection.cr","line_number":22,"url":null},"def":{"name":"identified_by","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      property \n{{ name.id }}\n = \"\"\n\n      private def internal_identifier\n        @\n{{ name.id }}\n\n      \nend\n    \n"}},{"id":"owned_by(type_definition)-macro","html_id":"owned_by(type_definition)-macro","name":"owned_by","doc":null,"summary":null,"abstract":false,"args":[{"name":"type_definition","doc":null,"default_value":"","external_name":"type_definition","restriction":""}],"args_string":"(type_definition)","location":{"filename":"src/cable/connection.cr","line_number":30,"url":null},"def":{"name":"owned_by","args":[{"name":"type_definition","doc":null,"default_value":"","external_name":"type_definition","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      property \n{{ type_definition.var }}\n : \n{{ type_definition.type }}\n?\n    \n"}}],"types":[{"html_id":"cable/Cable/Connection/UnathorizedConnectionException","path":"Cable/Connection/UnathorizedConnectionException.html","kind":"class","full_name":"Cable::Connection::UnathorizedConnectionException","name":"UnathorizedConnectionException","abstract":false,"superclass":{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable/Connection","kind":"class","full_name":"Cable::Connection","name":"Connection"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"cable/Cable/Debug","path":"Cable/Debug.html","kind":"module","full_name":"Cable::Debug","name":"Debug","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"cable/Cable/Server","kind":"class","full_name":"Cable::Server","name":"Server"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"debug-instance-method","html_id":"debug-instance-method","name":"debug","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/debug.cr","line_number":39,"url":null},"def":{"name":"debug","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cable::Logger.debug do\n  \"-\" * 80\nend\nCable::Logger.debug do\n  \"Some Good Information\"\nend\nCable::Logger.debug do\n  \"Connections\"\nend\n@connections.each do |k, v|\n  Cable::Logger.debug do\n    \"Connection Key: #{k}\"\n  end\nend\nCable::Logger.debug do\n  \"Channels\"\nend\n@channels.each do |k, v|\n  Cable::Logger.debug do\n    \"Channel Key: #{k}\"\n  end\n  Cable::Logger.debug do\n    \"Channels\"\n  end\n  v.each do |channel|\n    Cable::Logger.debug do\n      \"From Channel: #{channel.connection.connection_identifier}\"\n    end\n    Cable::Logger.debug do\n      \"Params: #{channel.params}\"\n    end\n    Cable::Logger.debug do\n      \"ID: #{channel.identifier}\"\n    end\n    Cable::Logger.debug do\n      \"Stream ID:: #{channel.stream_identifier}\"\n    end\n  end\nend\nCable::Logger.debug do\n  \"-\" * 80\nend\n"}},{"id":"debug_json-instance-method","html_id":"debug_json-instance-method","name":"debug_json","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/debug.cr","line_number":5,"url":null},"def":{"name":"debug_json","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_channels = {} of String => Set(String)\n@channels.each do |k, v|\n  __temp_35 = v.first.class.to_s\n  _channels[__temp_35]? || (_channels[__temp_35] = Set {k})\n  _channels[v.first.class.to_s] << k\nend\n{\"connections\" => @connections.size, \"channels\" => @channels.size, \"channels_mounted\" => _channels, \"connections_mounted\" => @connections.map do |key, connection|\n  connections_mounted_channels = [] of Hash(String, String | Nil)\n  @channels.each do |_, v|\n    v.each do |channel|\n      if channel.connection.connection_identifier == key\n      else\n        next\n      end\n      connections_mounted_channels << {\"channel\" => channel.class.to_s, \"key\" => channel.stream_identifier}\n    end\n  end\n  {\"key\" => key, \"identifier\" => connection.identifier, \"started_at\" => connection.started_at.to_s(\"%Y-%m-%dT%H:%M:%S.%6N\"), \"channels\" => connections_mounted_channels}\nend}\n"}}],"macros":[],"types":[]},{"html_id":"cable/Cable/HabitatSettings","path":"Cable/HabitatSettings.html","kind":"class","full_name":"Cable::HabitatSettings","name":"HabitatSettings","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[{"id":"disable_sec_websocket_protocol_header:Bool-class-method","html_id":"disable_sec_websocket_protocol_header:Bool-class-method","name":"disable_sec_websocket_protocol_header","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":null,"def":{"name":"disable_sec_websocket_protocol_header","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@@disable_sec_websocket_protocol_header.not_nil!"}},{"id":"disable_sec_websocket_protocol_header=(value:Bool)-class-method","html_id":"disable_sec_websocket_protocol_header=(value:Bool)-class-method","name":"disable_sec_websocket_protocol_header=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":null,"def":{"name":"disable_sec_websocket_protocol_header=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@disable_sec_websocket_protocol_header = value"}},{"id":"disable_sec_websocket_protocol_header?-class-method","html_id":"disable_sec_websocket_protocol_header?-class-method","name":"disable_sec_websocket_protocol_header?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use disable_sec_websocket_protocol_header in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use disable_sec_websocket_protocol_header in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"disable_sec_websocket_protocol_header?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@disable_sec_websocket_protocol_header"}},{"id":"route:String-class-method","html_id":"route:String-class-method","name":"route","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"route","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@route.not_nil!"}},{"id":"route=(value:String)-class-method","html_id":"route=(value:String)-class-method","name":"route=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"route=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@route = value"}},{"id":"route?-class-method","html_id":"route?-class-method","name":"route?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use route in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use route in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"route?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@route"}},{"id":"to_h-class-method","html_id":"to_h-class-method","name":"to_h","doc":"Generates a hash using the provided values","summary":"<p>Generates a hash using the provided values</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{\"route\" => route, \"token\" => token, \"url\" => url, \"disable_sec_websocket_protocol_header\" => disable_sec_websocket_protocol_header}"}},{"id":"token:String-class-method","html_id":"token:String-class-method","name":"token","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@token.not_nil!"}},{"id":"token=(value:String)-class-method","html_id":"token=(value:String)-class-method","name":"token=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"token=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@token = value"}},{"id":"token?-class-method","html_id":"token?-class-method","name":"token?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use token in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use token in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"token?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@token"}},{"id":"url:String-class-method","html_id":"url:String-class-method","name":"url","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"url","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@@url.not_nil!"}},{"id":"url=(value:String)-class-method","html_id":"url=(value:String)-class-method","name":"url=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","location":null,"def":{"name":"url=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@url = value"}},{"id":"url?-class-method","html_id":"url?-class-method","name":"url?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use url in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use url in your apps to ensure the propper type is checked.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":null,"def":{"name":"url?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@url"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cable/Cable/Handler","path":"Cable/Handler.html","kind":"class","full_name":"Cable::Handler(T)","name":"Handler","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cable/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","args_html":"(context)","location":{"filename":"src/cable/handler.cr","line_number":7,"url":null},"def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (ws_route_found?(context)) && (websocket_upgrade_request?(context))\nelse\n  return call_next(context)\nend\nremote_address = context.request.remote_address\npath = context.request.path\nCable::Logger.info do\n  \"Started GET \\\"#{path}\\\" [WebSocket] for #{remote_address} at #{Time.utc.to_s}\"\nend\nif Cable.settings.disable_sec_websocket_protocol_header\nelse\n  context.response.headers[\"Sec-WebSocket-Protocol\"] = \"actioncable-v1-json\"\nend\nws = HTTP::WebSocketHandler.new do |socket, context|\n  connection = T.new(context.request, socket)\n  connection_id = connection.connection_identifier\n  if connection.connection_rejected?\n  else\n    Cable.server.add_connection(connection)\n  end\n  socket.send({type: Cable.message(:welcome)}.to_json)\n  Cable::WebsocketPinger.build(socket)\n  socket.on_ping do\n    socket.pong(context.request.path)\n    Cable::Logger.debug do\n      \"Ping received\"\n    end\n  end\n  socket.on_message do |message|\n    begin\n      connection.receive(message)\n    rescue e : Cable::Connection::UnathorizedConnectionException\n    rescue e : Exception\n      Cable::Logger.error do\n        \"Exception: #{e.message}\"\n      end\n    end\n  end\n  socket.on_close do\n    Cable.server.remove_connection(connection_id)\n    Cable::Logger.info do\n      \"Finished \\\"#{path}\\\" [WebSocket] for #{remote_address} at #{Time.utc.to_s}\"\n    end\n  end\nend\nCable::Logger.info do\n  \"Successfully upgraded to WebSocket (REQUEST_METHOD: GET, HTTP_CONNECTION: Upgrade, HTTP_UPGRADE: websocket)\"\nend\nws.call(context)\n"}}],"macros":[],"types":[]},{"html_id":"cable/Cable/Payload","path":"Cable/Payload.html","kind":"class","full_name":"Cable::Payload","name":"Payload","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(json:String)-class-method","html_id":"new(json:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"String"}],"args_string":"(json : String)","args_html":"(json : String)","location":{"filename":"src/cable/payload.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(json)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"action:String-instance-method","html_id":"action:String-instance-method","name":"action","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cable/payload.cr","line_number":7,"url":null},"def":{"name":"action","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@action"}},{"id":"action?:Bool-instance-method","html_id":"action?:Bool-instance-method","name":"action?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/cable/payload.cr","line_number":25,"url":null},"def":{"name":"action?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@is_action"}},{"id":"channel:String?-instance-method","html_id":"channel:String?-instance-method","name":"channel","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/cable/payload.cr","line_number":10,"url":null},"def":{"name":"channel","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@channel"}},{"id":"channel_params:Hash(String,Cable::Payload::RESULT)-instance-method","html_id":"channel_params:Hash(String,Cable::Payload::RESULT)-instance-method","name":"channel_params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Cable::Payload::RESULT)","args_html":" : Hash(String, <a href=\"../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>)","location":{"filename":"src/cable/payload.cr","line_number":11,"url":null},"def":{"name":"channel_params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Cable::Payload::RESULT)","visibility":"Public","body":"@channel_params"}},{"id":"command:String?-instance-method","html_id":"command:String?-instance-method","name":"command","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/cable/payload.cr","line_number":8,"url":null},"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@command"}},{"id":"data:Hash(String,Cable::Payload::RESULT)-instance-method","html_id":"data:Hash(String,Cable::Payload::RESULT)-instance-method","name":"data","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Cable::Payload::RESULT)","args_html":" : Hash(String, <a href=\"../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>)","location":{"filename":"src/cable/payload.cr","line_number":12,"url":null},"def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Cable::Payload::RESULT)","visibility":"Public","body":"@data"}},{"id":"identifier:String-instance-method","html_id":"identifier:String-instance-method","name":"identifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cable/payload.cr","line_number":9,"url":null},"def":{"name":"identifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@identifier"}},{"id":"json:String-instance-method","html_id":"json:String-instance-method","name":"json","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cable/payload.cr","line_number":6,"url":null},"def":{"name":"json","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@json"}}],"macros":[],"types":[{"html_id":"cable/Cable/Payload/PARAMS","path":"Cable/Payload/PARAMS.html","kind":"alias","full_name":"Cable::Payload::PARAMS","name":"PARAMS","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":true,"aliased":"Hash(String, Cable::Payload::RESULT)","aliased_html":"Hash(String, <a href=\"../../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable/Payload","kind":"class","full_name":"Cable::Payload","name":"Payload"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cable/Cable/Payload/RESULT","path":"Cable/Payload/RESULT.html","kind":"alias","full_name":"Cable::Payload::RESULT","name":"RESULT","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":true,"aliased":"(Hash(String, Cable::Payload::RESULT) | Int64 | String)","aliased_html":"Hash(String, <a href=\"../../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>) | Int64 | String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable/Payload","kind":"class","full_name":"Cable::Payload","name":"Payload"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"cable/Cable/Server","path":"Cable/Server.html","kind":"class","full_name":"Cable::Server","name":"Server","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Cable/Debug","kind":"module","full_name":"Cable::Debug","name":"Debug"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cable/Cable/Debug","kind":"module","full_name":"Cable::Debug","name":"Debug"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/server.cr","line_number":29,"url":null},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_connection(connection)-instance-method","html_id":"add_connection(connection)-instance-method","name":"add_connection","doc":null,"summary":null,"abstract":false,"args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":""}],"args_string":"(connection)","args_html":"(connection)","location":{"filename":"src/cable/server.cr","line_number":34,"url":null},"def":{"name":"add_connection","args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"connections[connection.connection_identifier] = connection"}},{"id":"connections:Hash(String,Cable::Connection)-instance-method","html_id":"connections:Hash(String,Cable::Connection)-instance-method","name":"connections","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Cable::Connection)","args_html":" : Hash(String, <a href=\"../Cable/Connection.html\">Cable::Connection</a>)","location":{"filename":"src/cable/server.cr","line_number":21,"url":null},"def":{"name":"connections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connections"}},{"id":"fiber_channel:Channel({String,String})-instance-method","html_id":"fiber_channel:Channel({String,String})-instance-method","name":"fiber_channel","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Channel({String, String})","args_html":" : Channel({String, String})","location":{"filename":"src/cable/server.cr","line_number":24,"url":null},"def":{"name":"fiber_channel","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@fiber_channel"}},{"id":"publish(channel:String,message:String)-instance-method","html_id":"publish(channel:String,message:String)-instance-method","name":"publish","doc":"redis only accepts strings, so we should be strict here","summary":"<p>redis only accepts strings, so we should be strict here</p>","abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","args_html":"(channel : String, message : String)","location":{"filename":"src/cable/server.cr","line_number":80,"url":null},"def":{"name":"publish","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"redis_publish.publish(channel, message)"}},{"id":"redis_publish:Redis-instance-method","html_id":"redis_publish:Redis-instance-method","name":"redis_publish","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Redis","args_html":" : <a href=\"../Redis.html\">Redis</a>","location":{"filename":"src/cable/server.cr","line_number":23,"url":null},"def":{"name":"redis_publish","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@redis_publish"}},{"id":"redis_subscribe:Redis-instance-method","html_id":"redis_subscribe:Redis-instance-method","name":"redis_subscribe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Redis","args_html":" : <a href=\"../Redis.html\">Redis</a>","location":{"filename":"src/cable/server.cr","line_number":22,"url":null},"def":{"name":"redis_subscribe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@redis_subscribe"}},{"id":"remove_connection(connection_id)-instance-method","html_id":"remove_connection(connection_id)-instance-method","name":"remove_connection","doc":null,"summary":null,"abstract":false,"args":[{"name":"connection_id","doc":null,"default_value":"","external_name":"connection_id","restriction":""}],"args_string":"(connection_id)","args_html":"(connection_id)","location":{"filename":"src/cable/server.cr","line_number":38,"url":null},"def":{"name":"remove_connection","args":[{"name":"connection_id","doc":null,"default_value":"","external_name":"connection_id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(connections.delete(connection_id)).try(&.close)"}},{"id":"safe_decode_message(message)-instance-method","html_id":"safe_decode_message(message)-instance-method","name":"safe_decode_message","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","args_html":"(message)","location":{"filename":"src/cable/server.cr","line_number":106,"url":null},"def":{"name":"safe_decode_message","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  case message\n  when String\n    JSON.parse(message)\n  else\n    message\n  end\nrescue JSON::ParseException\n  message\nend"}},{"id":"send_to_channels(channel_identifier,message)-instance-method","html_id":"send_to_channels(channel_identifier,message)-instance-method","name":"send_to_channels","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel_identifier","doc":null,"default_value":"","external_name":"channel_identifier","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(channel_identifier, message)","args_html":"(channel_identifier, message)","location":{"filename":"src/cable/server.cr","line_number":84,"url":null},"def":{"name":"send_to_channels","args":[{"name":"channel_identifier","doc":null,"default_value":"","external_name":"channel_identifier","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  if @channels.has_key?(channel_identifier)\n  else\n    return\n  end\n  parsed_message = safe_decode_message(message)\n  @channels[channel_identifier].each do |channel|\n    if channel.connection.socket.closed?\n      channel.close\n    else\n      Cable::Logger.info do\n        \"#{channel.class} transmitting #{parsed_message} (via streamed from #{channel.stream_identifier})\"\n      end\n      channel.connection.socket.send({identifier: channel.identifier, message: parsed_message}.to_json)\n    end\n  end\nrescue e : IO::Error\n  Cable::Logger.error do\n    \"IO::Error Exception: #{e.message} -> #{self.class.name}#send_to_channels(channel, message)\"\n  end\nend"}},{"id":"shutdown-instance-method","html_id":"shutdown-instance-method","name":"shutdown","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/server.cr","line_number":117,"url":null},"def":{"name":"shutdown","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"request = Redis::Request.new\nrequest << \"unsubscribe\"\nredis_subscribe._connection.send(request)\nredis_subscribe.close\nredis_publish.close\nconnections.each do |k, v|\n  v.close\nend\n"}},{"id":"subscribe_channel(channel:Channel,identifier:String)-instance-method","html_id":"subscribe_channel(channel:Channel,identifier:String)-instance-method","name":"subscribe_channel","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel"},{"name":"identifier","doc":null,"default_value":"","external_name":"identifier","restriction":"String"}],"args_string":"(channel : Channel, identifier : String)","args_html":"(channel : <a href=\"../Cable/Channel.html\">Channel</a>, identifier : String)","location":{"filename":"src/cable/server.cr","line_number":42,"url":null},"def":{"name":"subscribe_channel","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel"},{"name":"identifier","doc":null,"default_value":"","external_name":"identifier","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@channel_mutex.synchronize do\n  if !(@channels.has_key?(identifier))\n    @channels[identifier] = Channels.new\n  end\n  @channels[identifier] << channel\nend\nrequest = Redis::Request.new\nrequest << \"subscribe\"\nrequest << identifier\nredis_subscribe._connection.send(request)\n"}},{"id":"unsubscribe_channel(channel:Channel,identifier:String)-instance-method","html_id":"unsubscribe_channel(channel:Channel,identifier:String)-instance-method","name":"unsubscribe_channel","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel"},{"name":"identifier","doc":null,"default_value":"","external_name":"identifier","restriction":"String"}],"args_string":"(channel : Channel, identifier : String)","args_html":"(channel : <a href=\"../Cable/Channel.html\">Channel</a>, identifier : String)","location":{"filename":"src/cable/server.cr","line_number":57,"url":null},"def":{"name":"unsubscribe_channel","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel"},{"name":"identifier","doc":null,"default_value":"","external_name":"identifier","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@channel_mutex.synchronize do\n  if @channels.has_key?(identifier)\n    @channels[identifier].delete(channel)\n    if @channels[identifier].size == 0\n      request = Redis::Request.new\n      request << \"unsubscribe\"\n      request << identifier\n      redis_subscribe._connection.send(request)\n      @channels.delete(identifier)\n    end\n  else\n    request = Redis::Request.new\n    request << \"unsubscribe\"\n    request << identifier\n    redis_subscribe._connection.send(request)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"cable/Cable/WebsocketPinger","path":"Cable/WebsocketPinger.html","kind":"class","full_name":"Cable::WebsocketPinger","name":"WebsocketPinger","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"doc":null,"summary":null,"class_methods":[{"id":"build(socket:HTTP::WebSocket)-class-method","html_id":"build(socket:HTTP::WebSocket)-class-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(socket : HTTP::WebSocket)","args_html":"(socket : HTTP::WebSocket)","location":{"filename":"src/cable/websocket_pinger.cr","line_number":17,"url":null},"def":{"name":"build","args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(socket)"}},{"id":"run_every(value:Int32|Float64,&)-class-method","html_id":"run_every(value:Int32|Float64,&)-class-method","name":"run_every","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | Float64"}],"args_string":"(value : Int32 | Float64, &)","args_html":"(value : Int32 | Float64, &)","location":{"filename":"src/cable/websocket_pinger.cr","line_number":9,"url":null},"def":{"name":"run_every","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32 | Float64"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@@seconds = value\nyield\n@@seconds = 3\n"}},{"id":"seconds-class-method","html_id":"seconds-class-method","name":"seconds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cable/websocket_pinger.cr","line_number":21,"url":null},"def":{"name":"seconds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@seconds"}}],"constructors":[{"id":"new(socket:HTTP::WebSocket)-class-method","html_id":"new(socket:HTTP::WebSocket)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(socket : HTTP::WebSocket)","args_html":"(socket : HTTP::WebSocket)","location":{"filename":"src/cable/websocket_pinger.cr","line_number":25,"url":null},"def":{"name":"new","args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::WebSocket"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(socket)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[{"html_id":"cable/Cable/WebsocketPinger/PingStoppedException","path":"Cable/WebsocketPinger/PingStoppedException.html","kind":"class","full_name":"Cable::WebsocketPinger::PingStoppedException","name":"PingStoppedException","abstract":false,"superclass":{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cable/Cable/WebsocketPinger","kind":"class","full_name":"Cable::WebsocketPinger","name":"WebsocketPinger"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"cable/Redis","path":"Redis.html","kind":"class","full_name":"Redis","name":"Redis","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Redis/CommandExecution/ValueOriented","kind":"module","full_name":"Redis::CommandExecution::ValueOriented","name":"ValueOriented"},{"html_id":"cable/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cable","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"cable/Redis/CommandExecution/ValueOriented","kind":"module","full_name":"Redis::CommandExecution::ValueOriented","name":"ValueOriented"},{"html_id":"cable/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"On redis shard it tries to convert the return of command to Nil\nWhen returning an array, it raises an exception\nSo we monkey patch to run the command, ignore it, and return Nil","summary":"<p>On redis shard it tries to convert the return of command to Nil When returning an array, it raises an exception So we monkey patch to run the command, ignore it, and return Nil</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"_connection:Redis::Connection-instance-method","html_id":"_connection:Redis::Connection-instance-method","name":"_connection","doc":"Needs access to connection so we can subscribe to\nmultiple channels","summary":"<p>Needs access to connection so we can subscribe to multiple channels</p>","abstract":false,"args":[],"args_string":" : Redis::Connection","args_html":" : Redis::Connection","location":{"filename":"src/cable/monkeypatch/redis.cr","line_number":15,"url":null},"def":{"name":"_connection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Redis::Connection","visibility":"Public","body":"connection"}}],"macros":[],"types":[]}]}}