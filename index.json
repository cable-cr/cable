{"repository_name":"cable","body":"# Cable\n\n[![ci workflow](https://github.com/cable-cr/cable/actions/workflows/ci.yml/badge.svg)](https://github.com/cable-cr/cable/actions/workflows/ci.yml)\n\nIt's like [ActionCable](https://guides.rubyonrails.org/action_cable_overview.html) (100% compatible with JS Client), but you know, for Crystal.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n> NOTE: You must explicitly add the Redis shard also.\n\n```yaml\ndependencies:\n  cable:\n    github: cable-cr/cable\n    branch: master # or use the latest version\n  redis:\n    github: jgaskins/redis\n    branch: master # lock down if needed\n```\n\n> NOTE: You can only use a single Redis shard. We recommend https://github.com/jgaskins/redis. However, you can use the legacy shard https://github.com/stefanwille/crystal-redis.\n\n2. Run `shards install`\n\n## Usage\n\nApplication code\n```crystal\nrequire \"cable\"\nrequire \"cable/backend/redis/backend\"\n```\n\n## Backend setup\n\nAt the moment, we only support a Redis backend.\n\n### Redis\n\nDue to some stability issues, we recently swapped the Redis shard.\n\nTo offer backwards compatibility, we still provide the ability to use the previous legacy shard. However, this may change in the future.\n\n**Release 0.3**\n\nMoving forward, from this release, we are officially supporting this [Redis shard](https://github.com/jgaskins/redis).\n\nPrior to this release, we used this [Redis shard](https://github.com/stefanwille/crystal-redis).\n\nHowever, since we cannot use two conflicting shards, we only run tests against our officially supported shard.\n\n**Legacy Redis shard usage**\n\nYou can still choose to continue to use the legacy Redis shards.\n\n```yaml\ndependencies:\n  cable:\n    github: cable-cr/cable\n  redis:\n    github: stefanwille/crystal-redis\n    version: ~> 2.8.0 # last tested version\n```\n\nApplication code\n\n```crystal\nrequire \"cable\"\nrequire \"cable/backend/redis/legacy/backend\"\n```\n\n**Testing the legacy Redis shard**\n\nIf you want to test the legacy shard locally, change these files;\n\n```crystal\n# spec/spec_helper.cr\n\n# require \"../src/backend/redis/backend\"\nrequire \"../src/backend/redis/legacy/backend\"\n```\n\n```yaml\n# shard.yml\n\ndevelopment_dependencies:\n  # redis:\n  #   github: jgaskins/redis\n  #   version: ~> 0.5.0\n  redis:\n    github: stefanwille/crystal-redis\n    version: ~> 2.8.0\n```\n\nRun `shards install`\n\n## Lucky example\n\nTo help better illustrate how the entire setup looks, we'll use the [lucky web framework](https://luckyframework.org), but this will work in any Crystal web framework.\n\n### Load the shard\n\n```crystal\n# src/shards.cr\n\nrequire \"cable\"\nrequire \"cable/backend/redis/backend\"\n```\n\n### Mount the middleware\n\nAdd the `Cable::Handler` before `Lucky::RouteHandler`\n\n```crystal\n# src/app_server.cr\n\nclass AppServer < Lucky::BaseAppServer\n  def middleware\n    [\n      Cable::Handler(ApplicationCable::Connection).new, # place before the middleware below\n      Honeybadger::Handler.new,\n      Lucky::ErrorHandler.new(action: Errors::Show),\n      Lucky::RouteHandler.new,\n    ]\n   end\nend\n```\n\n### Configure cable settings\n\nAfter that, you can configure your `Cable server`. The defaults are:\n\n```crystal\n# config/cable.cr\n\nCable.configure do |settings|\n  settings.route = \"/cable\"    # the URL your JS Client will connect\n  settings.token = \"token\"     # The query string parameter used to get the token\n  settings.url = ENV.fetch(\"REDIS_URL\", \"redis://localhost:6379\")\n\n  # See Vanilla JS example below for more info\n  settings.disable_sec_websocket_protocol_header = false\n\n  # stability settings\n  settings.redis_ping_interval = 15.seconds\n  settings.restart_error_allowance = 20\n\n  # DEPRECATED!\n  # only use if you are using stefanwille/crystal-redis\n  # AND you want to use the connection pool\n  # Use a single publish connection by default.\n  # settings.pool_redis_publish = false # set to `true` to enable a pooled connection on publish\n  # settings.redis_pool_size = 5\n  # settings.redis_pool_timeout = 5.0\nend\n```\n\n### Configure logging level\n\nYou may want to tune how to report logging.\n\n```crystal\n# config/log.cr\n\nlog_levels = {\n  \"debug\" => Log::Severity::Debug,\n  \"info\"  => Log::Severity::Info,\n  \"error\" => Log::Severity::Error,\n}\n\n# use the `CABLE_DEBUG_LEVEL` env var to choose any of the 3 log levels above\nCable::Logger.level = log_levels[ENV.fetch(\"CABLE_DEBUG_LEVEL\", \"info\")]\n```\n\nAlternatively, use a global log level which matches you application log code also.\n\nSee [Crystal API docs](https://crystal-lang.org/api/1.6.1/Log.html#configure-logging-from-environment-variables) for more details..\n\n```crystal\n# config/log.cr\n\n# use the `LOG_LEVEL` env var\n\nCable::Logger.setup_from_env(default_level: :warn)\n```\n\n> NOTE: The volume of logs produced are high... If log costs are a concern, use `warn` level to only receive critical logs\n\n### Setup the main application connection and channel classes\n\nThen you need to implement a few classes.\n\nThe connection class is how you are going to handle connections. It's referenced in the `src/app_server.cr` file when creating the handler.\n\n```crystal\n# src/channels/application_cable/connection.cr\n\nmodule ApplicationCable\n  class Connection < Cable::Connection\n    # You need to specify how you identify the class, using something like:\n    # Remembering that it must be a String\n    # Tip: Use your `User#id` converted to String\n    identified_by :identifier\n\n    # If you'd like to keep a `User` instance together with the Connection, so\n    # there's no need to fetch from the database all the time, you can use the\n    # `owned_by` instruction\n    owned_by current_user : User\n\n    def connect\n      UserToken.decode_user_id(token.to_s).try do |user_id|\n        self.identifier = user_id.to_s\n        self.current_user =  UserQuery.find(user_id)\n      end\n    end\n  end\nend\n```\n\nThen you need you a base channel to make it easy to inherit your app's Cable logic.\n\n```crystal\n# src/channels/application_cable/channel.cr\n\nmodule ApplicationCable\n  class Channel < Cable::Channel\n    # some potential shared logic or helpers\n  end\nend\n```\n\n### Create your app channels\n\n**Kitchen sink example**\n\nThen create your cables, as much as your want!! Let's set up a `ChatChannel` as an example:\n\n```crystal\n# src/channels/chat_channel.cr\n\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    # We don't support stream_for, needs to generate your own unique string\n    stream_from \"chat_#{params[\"room\"]}\"\n  end\n\n  def receive(data)\n    broadcast_message = {} of String => String\n    broadcast_message[\"message\"] = data[\"message\"].to_s\n    broadcast_message[\"current_user_id\"] = connection.identifier\n    ChatChannel.broadcast_to(\"chat_#{params[\"room\"]}\", broadcast_message)\n  end\n\n  def perform(action, action_params)\n    user = UserQuery.new.find(connection.identifier)\n    # Perform actions on a user object. For example, you could manage\n    # its status by adding some .away and .status methods on it like below\n    # user.away if action == \"away\"\n    # user.status(action_params[\"status\"]) if action == \"status\"\n    ChatChannel.broadcast_to(\"chat_#{params[\"room\"]}\", {\n      \"user\"      => user.email,\n      \"performed\" => action.to_s,\n    })\n  end\n\n  def unsubscribed\n    #  Perform any action after the client closes the connection.\n    user = UserQuery.new.find(connection.identifier)\n\n    # You could, for example, call any method on your user\n    # user.logout\n  end\nend\n```\n\n**Rejection example**\n\nReject channel subscription if the request is invalid:\n\n```crystal\n# src/channels/chat_channel.cr\n\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    reject if user_not_allowed_to_join_chat_room?\n\n    stream_from \"chat_#{params[\"room\"]}\"\n  end\nend\n```\n\n**Callbacks example**\n\nUse callbacks to perform actions or transmit messages once the connection/channel has been subscribed.\n\n```crystal\n# src/channels/chat_channel.cr\n\nclass ChatChannel < ApplicationCable::Channel\n  # you can name these callbacks anything you want...\n  # `after_subscribed` can accept 1 or more callbacks to be run in order\n  after_subscribed :broadcast_welcome_pack_to_single_subscribed_user,\n                   :announce_user_joining_to_everyone_else_in_the_channel,\n                   :process_some_stuff\n\n  def subscribed\n    stream_from \"chat_#{params[\"room\"]}\"\n  end\n\n  # If you ONLY need to send the current_user a message\n  # and none of the other subscribers\n  #\n  # use -> transmit(message), which accepts Hash(String, String) or String\n  def broadcast_welcome_pack_to_single_subscribed_user\n    transmit({ \"welcome_pack\" => \"some cool stuff for this single user\" })\n  end\n\n  # On the other hand,\n  # if you want to broadcast a message\n  # to all subscribers connected to this channel\n  #\n  # use -> broadcast(message), which accepts Hash(String, String) or String\n  def announce_user_joining_to_everyone_else_in_the_channel\n    broadcast(\"username xyz just joined\")\n  end\n\n  # you don't need to use the transmit functionality\n  def process_some_stuff\n    send_welcome_email_to_user\n    update_their_profile\n  end\nend\n```\n\n## Redis\n\nRedis is awesome, but it has complexities that need to be considered;\n\n1. Redis Pub/Sub works really well until you lose the connection...\n2. Redis connections can go stale without activity.\n3. Redis connection TCP issues can cause unstable connections.\n4. Redis DB's have a buffer related to the message sizes called [Output Buffer Limits](https://redis.io/docs/reference/clients/#output-buffer-limits). Exceeding this buffer will not disconnect the connection. It just yields it dead. You cannot know about this except by monitoring logs/metrics.\n\nHere are some ways this shard can help with this.\n\n### Restarting the server\n\nWhen the first connection is made, the cable server spawns a single pub/sub connection for all subscriptions.\nIf the connection dies at any point, the server will continue to throw errors unless someone manually restarts the server...\n\nThe cable server provides an automated failure rate monitoring/restart function to automate the restart process.\n\nWhen the server encounters (n) errors are trying to connect to the Redis connection, it restarts the server.\nThe error rate allowance avoids a vicious cycle i.e. (n) clients attempting to connect vs server restarts while Redis is down.\nGenerally, if the Redis connection is down, you'll exceed this error allowance quickly. So you may encounter severe back-to-back restarts if Redis is down for a substantial time.\nThis is expected for any system which uses a Redis backed, and Redis goes down. However, once Redis covers, Cable will self-heal and re-establish all the socket connections.\n\n> NOTE: The automated restart process will also kill all the current client WS connections.\n> However, this trade-off allows a fault-tolerant system vs leaving a dead Redis connection hanging around with no pub/sub activity.\n\n**Restart allowance settings**\n\nYou can change this setting. However, we advise not going below 20.\n\n```crystal\nCable.configure do |settings|\n  settings.restart_error_allowance = 20 # default is 20. Use 0 to disable restarts\nend\n```\n\n> NOTE: An error log `Cable.restart` will be invoked whenever a restart happens. We highly advise you to monitor these logs.\n\n### Maintain Redis connection activity\n\nWhen the first connection is made, the cable server starts a Redis PING/PONG task, which runs every 15 seconds. This helps to keep the Redis connection from going stale.\n\nYou can change this setting. However, we advise not going over 60 seconds.\n\n```crystal\nCable.configure do |settings|\n  settings.redis_ping_interval = 15.seconds # default is 15.\nend\n```\n\n### Enable pooling and TCP keepalive\n\nThe Redis officially supported shard allows us to create a connection pool and also enable TCP keepalive settings.\n\n**Recommended setup**\n\nStart simple with the following settings.\nThe Redis shard has pretty good default settings for pooling and TCP keepalive.\n\n```crystal\n# .env\n\nREDIS_URL: <redis_connection_string>?keepalive=true\n```\n\n```crystal\n# config/cable.cr\n\nCable.configure do |settings|\n  settings.url = ENV.fetch(\"REDIS_URL\", \"redis://localhost:6379\")\nend\n```\n\n> NOTE: This is not enabled by default. You must pass this param to the connection string to ensure this is enabled.\n\nSee the [full docs](https://github.com/jgaskins/redis#connection-pool) on the pooling and TCP keepalive capabilities.\n\n### Increase your Redis [Output Buffer Limits](https://redis.io/docs/reference/clients/#output-buffer-limits)\n\n> Technically, this shard cannot help with this.\n\nExceeding this buffer should be avoided to ensure a stable pub/sub connection.\n\nOptions;\n\n1. Double or triple this setting on your Redis DB. 32Mb is usually the default.\n2. Ensure you truncate the message sizes client side.\n\n## Error handling\n\nYou can setup a hook to report errors to any 3rd party service you choose.\n\n```crystal\n# config/cable.cr\nCable.configure do |settings|\n  settings.on_error = ->(exception : Exception, message : String) do\n    # new 3rd part service handler\n    ExceptionService.notify(exception, message: message)\n    # default logic\n    Cable::Logger.error(exception: exception) { message }\n  end\nend\n```\n**Default Handler**\n\n```crystal\nHabitat.create do\n  setting on_error : Proc(Exception, String, Nil) = ->(exception : Exception, message : String) do\n    Cable::Logger.error(exception: exception) { message }\n  end\nend\n```\n\n> NOTE: The message field will contain details regarding which class/method raised the error\n\n## Client-Side\n\nCheck below on the JavaScript section how to communicate with the Cable backend.\n\n### JavaScript\n\nIt works with [ActionCable](https://www.npmjs.com/package/actioncable) JS Client out-of-the-box!! Yeah, that's really cool no? If you need to adapt, make a hack, or something like that?!\n\nNo, you don't need it! Just read the few lines below and start playing with Cable in 5 minutes!\n\n### ActionCable JS Example\n\n[examples/action-cable-js-client.md](examples/action-cable-js-client.md)\n\n### Vanilla JS Examples\n\nIf you want to use this shard with iOS clients or vanilla JS using react etc., there is an example in the [examples](examples/) folder.\n\n> Note - If you are using a vanilla - non-action-cable JS client, you may want to disable the action cable response headers as they cause issues for clients who don't know how to handle them. Set a Habitat disable_sec_websocket_protocol_header like so to disable those headers;\n\n```crystal\n# config/cable.cr\n\nCable.configure do |settings|\n  settings.disable_sec_websocket_protocol_header = true\nend\n```\n\n## Debugging\n\nYou can create a JSON endpoint to ping the server and check how things are going.\n\n```crystal\n# src/actions/debug/index.cr\n\nclass Debug::Index < ApiAction\n  include RequireAuthToken\n\n  get \"/debug\" do\n    json(Cable.server.debug_json) # Cable.server.debug_json is provided by this shard\n  end\nend\n```\n\nAlternatively, you can ping Redis directly using the redis-cli as follows;\n\n```bash\nPUBLISH _internal debug\n```\n\nThis will dump a debug status into the logs.\n\n## TODO\n\nAfter reading the docs, I realized I'm using some weird naming for variables/methods, so\n\n- [x] Need to make a connection use an identifier\n- [x] Add `identified_by identifier` to `Cable::Connection`\n- [x] Give better methods to reject a connection\n- [x] Refactor, Connection class, is so bloated\n- [ ] Allow tracing and observability hooks.\n- [ ] Allow external bug tracking hooks.\n- [ ] Allow custom JSON formatted logs.\n- [ ] Clean up of naming to make it easier for others to contribute.\n- [ ] Add an async/local adapter (make tests, development, and small deploys simpler)\n- [ ] Add PostgreSQL backend\n\n## First Class Citizen\n\n- [ ] Better integrate with Lucky, maybe with generators or something else?\n- [ ] Add support for Kemal\n- [ ] Add support for Amber\n\nThe idea is to create different modules, `Cable::Lucky`, `Cable::Kemal`, `Cable::Amber`, and make them easy to use with any crystal web framework.\n\n## Contributing\n\nYou know, fork-branch-push-pr 😉 don't be shy. Participate as you want!\n","program":{"html_id":"cable/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"cable","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"cable/Cable","path":"Cable.html","kind":"module","full_name":"Cable","name":"Cable","abstract":false,"ancestors":[{"html_id":"cable/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"cable/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"locations":[{"filename":"src/backend/dev/backend.cr","line_number":1,"url":null},{"filename":"src/backend/redis/backend.cr","line_number":1,"url":null},{"filename":"src/cable.cr","line_number":7,"url":null},{"filename":"src/cable/backend_core.cr","line_number":1,"url":null},{"filename":"src/cable/channel.cr","line_number":1,"url":null},{"filename":"src/cable/connection.cr","line_number":3,"url":null},{"filename":"src/cable/debug.cr","line_number":3,"url":null},{"filename":"src/cable/handler.cr","line_number":3,"url":null},{"filename":"src/cable/logger.cr","line_number":3,"url":null},{"filename":"src/cable/payload.cr","line_number":1,"url":null},{"filename":"src/cable/redis_pinger.cr","line_number":3,"url":null},{"filename":"src/cable/remote_connections.cr","line_number":1,"url":null},{"filename":"src/cable/server.cr","line_number":4,"url":null},{"filename":"src/cable/websocket_pinger.cr","line_number":3,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: route : String = Cable.message(:default_mount_path), example: \"/cable\", validation: nil}, {decl: token : String = \"token\", example: \"token\", validation: nil}, {decl: url : String = ENV.fetch(\"REDIS_URL\", \"redis://localhost:6379\"), example: \"redis://localhost:6379\", validation: nil}, {decl: disable_sec_websocket_protocol_header : Bool = false, example: nil, validation: nil}, {decl: backend_class : Cable::BackendCore.class = Cable::RedisBackend, example: \"Cable::RedisBackend\", validation: nil}, {decl: redis_ping_interval : Time::Span = 15.seconds, example: nil, validation: nil}, {decl: restart_error_allowance : Int32 = 20, example: nil, validation: nil}, {decl: on_error : Proc(Exception, String, Nil) = ->(exception : Exception, message : String) do\n  Cable::Logger.error(exception: exception) do\n    message\n  end\nend, example: nil, validation: nil}, {decl: pool_redis_publish : Bool = false, example: nil, validation: nil}, {decl: redis_pool_size : Int32 = 5, example: nil, validation: nil}, {decl: redis_pool_timeout : Float64 = 5.0, example: nil, validation: nil}] of Nil"},{"id":"INTERNAL","name":"INTERNAL","value":"{message_types: {welcome: \"welcome\", disconnect: \"disconnect\", ping: \"ping\", confirmation: \"confirm_subscription\", rejection: \"reject_subscription\", unsubscribe: \"confirm_unsubscription\"}, channel: \"_internal\", disconnect_reasons: {unauthorized: \"unauthorized\", invalid_request: \"invalid_request\", server_restart: \"server_restart\", remote: \"remote\"}, default_mount_path: \"/cable\", protocols: [\"actioncable-v1-json\", \"actioncable-unsupported\"]}"},{"id":"Logger","name":"Logger","value":"Log.for(self)"},{"id":"VERSION","name":"VERSION","value":"\"0.3.1\""}],"included_modules":[{"html_id":"cable/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"cable/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"doc":"TODO: Write documentation for `Cable`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"Cable.html\">Cable</a></code></p>","class_methods":[{"html_id":"configure(&)-class-method","name":"configure","abstract":false,"location":{"filename":"src/cable.cr","line_number":30,"url":null},"def":{"name":"configure","yields":1,"block_arity":1,"visibility":"Public","body":"yield settings"}},{"html_id":"message(event:Symbol)-class-method","name":"message","abstract":false,"args":[{"name":"event","external_name":"event","restriction":"Symbol"}],"args_string":"(event : Symbol)","args_html":"(event : Symbol)","location":{"filename":"src/cable.cr","line_number":50,"url":null},"def":{"name":"message","args":[{"name":"event","external_name":"event","restriction":"Symbol"}],"visibility":"Public","body":"INTERNAL[:message_types][event]"}},{"html_id":"reset_server-class-method","name":"reset_server","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":11,"url":null},"def":{"name":"reset_server","visibility":"Public","body":"@@server = nil"}},{"html_id":"restart-class-method","name":"restart","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":15,"url":null},"def":{"name":"restart","visibility":"Public","body":"if current_server = @@server\n  current_server.shutdown\n  Cable::Logger.error do\n    \"Cable.restart\"\n  end\nend\n@@server = Server.new\n"}},{"html_id":"server-class-method","name":"server","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":7,"url":null},"def":{"name":"server","visibility":"Public","body":"@@server || (@@server = Server.new)"}},{"html_id":"settings-class-method","name":"settings","abstract":false,"location":{"filename":"src/cable.cr","line_number":30,"url":null},"def":{"name":"settings","visibility":"Public","body":"HabitatSettings"}}],"instance_methods":[{"html_id":"settings-instance-method","name":"settings","abstract":false,"location":{"filename":"src/cable.cr","line_number":30,"url":null},"def":{"name":"settings","visibility":"Public","body":"HabitatSettings"}}],"types":[{"html_id":"cable/Cable/BackendCore","path":"Cable/BackendCore.html","kind":"class","full_name":"Cable::BackendCore","name":"BackendCore","abstract":true,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/backend_core.cr","line_number":2,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"cable/Cable/DevBackend","kind":"class","full_name":"Cable::DevBackend","name":"DevBackend"},{"html_id":"cable/Cable/RedisBackend","kind":"class","full_name":"Cable::RedisBackend","name":"RedisBackend"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"instance_methods":[{"html_id":"close_publish_connection-instance-method","name":"close_publish_connection","abstract":true,"location":{"filename":"src/cable/backend_core.cr","line_number":7,"url":null},"def":{"name":"close_publish_connection","visibility":"Public","body":""}},{"html_id":"close_subscribe_connection-instance-method","name":"close_subscribe_connection","abstract":true,"location":{"filename":"src/cable/backend_core.cr","line_number":6,"url":null},"def":{"name":"close_subscribe_connection","visibility":"Public","body":""}},{"html_id":"open_subscribe_connection(channel)-instance-method","name":"open_subscribe_connection","doc":"internal pub/sub","summary":"<p>internal pub/sub</p>","abstract":true,"args":[{"name":"channel","external_name":"channel","restriction":""}],"args_string":"(channel)","args_html":"(channel)","location":{"filename":"src/cable/backend_core.cr","line_number":10,"url":null},"def":{"name":"open_subscribe_connection","args":[{"name":"channel","external_name":"channel","restriction":""}],"visibility":"Public","body":""}},{"html_id":"ping_redis_publish-instance-method","name":"ping_redis_publish","abstract":true,"location":{"filename":"src/cable/backend_core.cr","line_number":22,"url":null},"def":{"name":"ping_redis_publish","visibility":"Public","body":""}},{"html_id":"ping_redis_subscribe-instance-method","name":"ping_redis_subscribe","abstract":true,"location":{"filename":"src/cable/backend_core.cr","line_number":21,"url":null},"def":{"name":"ping_redis_subscribe","visibility":"Public","body":""}},{"html_id":"publish_connection-instance-method","name":"publish_connection","abstract":true,"location":{"filename":"src/cable/backend_core.cr","line_number":5,"url":null},"def":{"name":"publish_connection","visibility":"Public","body":""}},{"html_id":"publish_message(stream_identifier:String,message:String)-instance-method","name":"publish_message","doc":"external pub/sub","summary":"<p>external pub/sub</p>","abstract":true,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(stream_identifier : String, message : String)","args_html":"(stream_identifier : String, message : String)","location":{"filename":"src/cable/backend_core.cr","line_number":13,"url":null},"def":{"name":"publish_message","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":""}},{"html_id":"subscribe(stream_identifier:String)-instance-method","name":"subscribe","doc":"channel management","summary":"<p>channel management</p>","abstract":true,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"args_string":"(stream_identifier : String)","args_html":"(stream_identifier : String)","location":{"filename":"src/cable/backend_core.cr","line_number":16,"url":null},"def":{"name":"subscribe","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"visibility":"Public","body":""}},{"html_id":"subscribe_connection-instance-method","name":"subscribe_connection","doc":"connection management","summary":"<p>connection management</p>","abstract":true,"location":{"filename":"src/cable/backend_core.cr","line_number":4,"url":null},"def":{"name":"subscribe_connection","visibility":"Public","body":""}},{"html_id":"unsubscribe(stream_identifier:String)-instance-method","name":"unsubscribe","abstract":true,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"args_string":"(stream_identifier : String)","args_html":"(stream_identifier : String)","location":{"filename":"src/cable/backend_core.cr","line_number":17,"url":null},"def":{"name":"unsubscribe","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"visibility":"Public","body":""}}]},{"html_id":"cable/Cable/Channel","path":"Cable/Channel.html","kind":"class","full_name":"Cable::Channel","name":"Channel","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/channel.cr","line_number":2,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CHANNELS","name":"CHANNELS","value":"{} of String => Cable::Channel.class"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"class_methods":[{"html_id":"broadcast_to(channel:String,message:JSON::Any|Hash(String,String))-class-method","name":"broadcast_to","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"JSON::Any | Hash(String, String)"}],"args_string":"(channel : String, message : JSON::Any | Hash(String, String))","args_html":"(channel : String, message : JSON::Any | Hash(String, String))","location":{"filename":"src/cable/channel.cr","line_number":62,"url":null},"def":{"name":"broadcast_to","args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"JSON::Any | Hash(String, String)"}],"visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] Broadcasting to #{channel}: #{message}\"\nend\nCable.server.publish(channel, message.to_json)\n"}},{"html_id":"broadcast_to(channel:String,message:String)-class-method","name":"broadcast_to","doc":"It's important that we don't call message.to_json","summary":"<p>It's important that we don't call message.to_json</p>","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","args_html":"(channel : String, message : String)","location":{"filename":"src/cable/channel.cr","line_number":68,"url":null},"def":{"name":"broadcast_to","args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] Broadcasting to #{channel}: #{message}\"\nend\nCable.server.publish(channel, message)\n"}}],"constructors":[{"html_id":"new(connection:Cable::Connection,identifier:String,params:Hash(String,Cable::Payload::RESULT))-class-method","name":"new","abstract":false,"args":[{"name":"connection","external_name":"connection","restriction":"Cable::Connection"},{"name":"identifier","external_name":"identifier","restriction":"String"},{"name":"params","external_name":"params","restriction":"Hash(String, Cable::Payload::RESULT)"}],"args_string":"(connection : Cable::Connection, identifier : String, params : Hash(String, Cable::Payload::RESULT))","args_html":"(connection : <a href=\"../Cable/Connection.html\">Cable::Connection</a>, identifier : String, params : Hash(String, <a href=\"../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>))","location":{"filename":"src/cable/channel.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"connection","external_name":"connection","restriction":"Cable::Connection"},{"name":"identifier","external_name":"identifier","restriction":"String"},{"name":"params","external_name":"params","restriction":"Hash(String, Cable::Payload::RESULT)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(connection, identifier, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"broadcast(message:String|JSON::Any|Hash(String,String))-instance-method","name":"broadcast","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String | JSON::Any | Hash(String, String)"}],"args_string":"(message : String | JSON::Any | Hash(String, String))","args_html":"(message : String | JSON::Any | Hash(String, String))","location":{"filename":"src/cable/channel.cr","line_number":73,"url":null},"def":{"name":"broadcast","args":[{"name":"message","external_name":"message","restriction":"String | JSON::Any | Hash(String, String)"}],"visibility":"Public","body":"if stream_id = stream_identifier.presence\n  Cable::Logger.info do\n    \"[ActionCable] Broadcasting to #{self.class}: #{message}\"\n  end\n  Cable.server.send_to_channels(stream_id, message)\nelse\n  Cable::Logger.error do\n    \"#{self.class}.transmit(message : #{message.class}) with #{message} without already using stream_from(stream_identifier)\"\n  end\nend"}},{"html_id":"close-instance-method","name":"close","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":40,"url":null},"def":{"name":"close","visibility":"Public","body":"if stream_id = stream_identifier.presence\n  Cable.server.unsubscribe_channel(channel: self, identifier: stream_id)\n  Cable::Logger.info do\n    \"#{self.class.name} stopped streaming from #{identifier}\"\n  end\nend\nunsubscribed\n"}},{"html_id":"connection:Cable::Connection-instance-method","name":"connection","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":26,"url":null},"def":{"name":"connection","return_type":"Cable::Connection","visibility":"Public","body":"@connection"}},{"html_id":"identifier:String-instance-method","name":"identifier","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":25,"url":null},"def":{"name":"identifier","return_type":"String","visibility":"Public","body":"@identifier"}},{"html_id":"params:Hash(String,Cable::Payload::RESULT)-instance-method","name":"params","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":24,"url":null},"def":{"name":"params","return_type":"Hash(String, Cable::Payload::RESULT)","visibility":"Public","body":"@params"}},{"html_id":"perform(action,message)-instance-method","name":"perform","abstract":false,"args":[{"name":"action","external_name":"action","restriction":""},{"name":"message","external_name":"message","restriction":""}],"args_string":"(action, message)","args_html":"(action, message)","location":{"filename":"src/cable/channel.cr","line_number":55,"url":null},"def":{"name":"perform","args":[{"name":"action","external_name":"action","restriction":""},{"name":"message","external_name":"message","restriction":""}],"visibility":"Public","body":""}},{"html_id":"receive(message)-instance-method","name":"receive","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""}],"args_string":"(message)","args_html":"(message)","location":{"filename":"src/cable/channel.cr","line_number":52,"url":null},"def":{"name":"receive","args":[{"name":"message","external_name":"message","restriction":""}],"visibility":"Public","body":""}},{"html_id":"reject-instance-method","name":"reject","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":33,"url":null},"def":{"name":"reject","visibility":"Public","body":"@subscription_rejected = true"}},{"html_id":"run_after_subscribed_callbacks-instance-method","name":"run_after_subscribed_callbacks","doc":"@override in after_subscribed macro","summary":"<p>@override in after_subscribed macro</p>","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":12,"url":null},"def":{"name":"run_after_subscribed_callbacks","visibility":"Public","body":""}},{"html_id":"stream_from(stream_identifier:String|Symbol)-instance-method","name":"stream_from","abstract":false,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String | Symbol"}],"args_string":"(stream_identifier : String | Symbol)","args_html":"(stream_identifier : String | Symbol)","location":{"filename":"src/cable/channel.cr","line_number":58,"url":null},"def":{"name":"stream_from","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String | Symbol"}],"visibility":"Public","body":"@stream_identifier = stream_identifier.to_s"}},{"html_id":"stream_identifier:String|Nil-instance-method","name":"stream_identifier","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":27,"url":null},"def":{"name":"stream_identifier","return_type":"String | ::Nil","visibility":"Public","body":"@stream_identifier"}},{"html_id":"subscribed-instance-method","name":"subscribed","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":37,"url":null},"def":{"name":"subscribed","visibility":"Public","body":""}},{"html_id":"subscription_rejected?:Bool-instance-method","name":"subscription_rejected?","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":28,"url":null},"def":{"name":"subscription_rejected?","return_type":"Bool","visibility":"Public","body":"@subscription_rejected"}},{"html_id":"transmit(message:String|JSON::Any|Hash(String,String))-instance-method","name":"transmit","doc":"broadcast single message to single connection for this channel","summary":"<p>broadcast single message to single connection for this channel</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String | JSON::Any | Hash(String, String)"}],"args_string":"(message : String | JSON::Any | Hash(String, String))","args_html":"(message : String | JSON::Any | Hash(String, String))","location":{"filename":"src/cable/channel.cr","line_number":83,"url":null},"def":{"name":"transmit","args":[{"name":"message","external_name":"message","restriction":"String | JSON::Any | Hash(String, String)"}],"visibility":"Public","body":"Cable::Logger.info do\n  \"[ActionCable] transmitting to #{self.class}: #{message}\"\nend\nconnection.send_message({identifier: identifier, message: Cable.server.safe_decode_message(message)}.to_json)\n"}},{"html_id":"unsubscribed-instance-method","name":"unsubscribed","abstract":false,"location":{"filename":"src/cable/channel.cr","line_number":49,"url":null},"def":{"name":"unsubscribed","visibility":"Public","body":""}}],"macros":[{"html_id":"after_subscribed(*callbacks)-macro","name":"after_subscribed","doc":"Run `block` after the subscription is created.","summary":"<p>Run <code>block</code> after the subscription is created.</p>","abstract":false,"args":[{"name":"callbacks","external_name":"callbacks","restriction":""}],"args_string":"(*callbacks)","args_html":"(*callbacks)","location":{"filename":"src/cable/channel.cr","line_number":16,"url":null},"def":{"name":"after_subscribed","args":[{"name":"callbacks","external_name":"callbacks","restriction":""}],"splat_index":0,"visibility":"Public","body":"      def run_after_subscribed_callbacks\n        \n{% for callback in callbacks %}\n          {{ callback.id }}\n        {% end %}\n\n      \nend\n    \n"}}],"types":[{"html_id":"cable/Cable/Channel/CloseRedisFiber","path":"Cable/Channel/CloseRedisFiber.html","kind":"class","full_name":"Cable::Channel::CloseRedisFiber","name":"CloseRedisFiber","abstract":false,"superclass":{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/channel.cr","line_number":3,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable/Channel","kind":"class","full_name":"Cable::Channel","name":"Channel"}}]},{"html_id":"cable/Cable/Channels","path":"Cable/Channels.html","kind":"alias","full_name":"Cable::Channels","name":"Channels","abstract":false,"locations":[{"filename":"src/cable/server.cr","line_number":5,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":true,"aliased":"Set(Cable::Channel)","aliased_html":"Set(<a href=\"../Cable/Channel.html\">Cable::Channel</a>)","const":false,"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"}},{"html_id":"cable/Cable/Connection","path":"Cable/Connection.html","kind":"class","full_name":"Cable::Connection","name":"Connection","abstract":true,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/connection.cr","line_number":4,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CHANNELS","name":"CHANNELS","value":"{} of String => Hash(String, Cable::Channel)"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"class_methods":[{"html_id":"broadcast_to(channel:String,message:String)-class-method","name":"broadcast_to","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","args_html":"(channel : String, message : String)","location":{"filename":"src/cable/connection.cr","line_number":173,"url":null},"def":{"name":"broadcast_to","args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"Cable.server.publish(channel, message)"}}],"constructors":[{"html_id":"new(request:HTTP::Request,socket:HTTP::WebSocket)-class-method","name":"new","abstract":false,"args":[{"name":"request","external_name":"request","restriction":"HTTP::Request"},{"name":"socket","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(request : HTTP::Request, socket : HTTP::WebSocket)","args_html":"(request : HTTP::Request, socket : HTTP::WebSocket)","location":{"filename":"src/cable/connection.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"request","external_name":"request","restriction":"HTTP::Request"},{"name":"socket","external_name":"socket","restriction":"HTTP::WebSocket"}],"visibility":"Public","body":"_ = allocate\n_.initialize(request, socket)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"channels:Array(Cable::Channel)-instance-method","name":"channels","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":55,"url":null},"def":{"name":"channels","return_type":"Array(Cable::Channel)","visibility":"Public","body":"if Connection::CHANNELS.has_key?(connection_identifier)\nelse\n  return Array(Cable::Channel).new\nend\nConnection::CHANNELS[connection_identifier].values\n"}},{"html_id":"close-instance-method","name":"close","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":64,"url":null},"def":{"name":"close","visibility":"Public","body":"if Connection::CHANNELS.has_key?(connection_identifier)\n  Connection::CHANNELS[connection_identifier].each do |identifier, channel|\n    begin\n      Connection::CHANNELS[connection_identifier].delete(identifier)\n      channel.close\n    rescue e : IO::Error\n      Cable.settings.on_error.call(e, \"IO::Error: #{e.message} -> #{self.class.name}#close\")\n    end\n  end\n  Connection::CHANNELS.delete(connection_identifier)\n  unsubscribe_from_internal_channel\nend\nif closed?\n  return true\nend\nCable::Logger.info do\n  \"Terminating connection #{connection_identifier}\"\nend\nsocket.close\n"}},{"html_id":"closed?:Bool-instance-method","name":"closed?","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":60,"url":null},"def":{"name":"closed?","return_type":"Bool","visibility":"Public","body":"socket.closed?"}},{"html_id":"connect-instance-method","name":"connect","abstract":true,"location":{"filename":"src/cable/connection.cr","line_number":49,"url":null},"def":{"name":"connect","visibility":"Public","body":""}},{"html_id":"connection_identifier:String-instance-method","name":"connection_identifier","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":8,"url":null},"def":{"name":"connection_identifier","return_type":"String","visibility":"Public","body":"@connection_identifier"}},{"html_id":"connection_identifier=(connection_identifier:String)-instance-method","name":"connection_identifier=","abstract":false,"args":[{"name":"connection_identifier","external_name":"connection_identifier","restriction":"String"}],"args_string":"(connection_identifier : String)","args_html":"(connection_identifier : String)","location":{"filename":"src/cable/connection.cr","line_number":8,"url":null},"def":{"name":"connection_identifier=","args":[{"name":"connection_identifier","external_name":"connection_identifier","restriction":"String"}],"visibility":"Public","body":"@connection_identifier = connection_identifier"}},{"html_id":"connection_rejected?:Bool-instance-method","name":"connection_rejected?","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":11,"url":null},"def":{"name":"connection_rejected?","return_type":"Bool","visibility":"Public","body":"@connection_rejected"}},{"html_id":"connection_requesting_duplicate_channel_subscription?(payload)-instance-method","name":"connection_requesting_duplicate_channel_subscription?","doc":"ensure we only allow subscribing to the same channel once from a connection","summary":"<p>ensure we only allow subscribing to the same channel once from a connection</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":""}],"args_string":"(payload)","args_html":"(payload)","location":{"filename":"src/cable/connection.cr","line_number":135,"url":null},"def":{"name":"connection_requesting_duplicate_channel_subscription?","args":[{"name":"payload","external_name":"payload","restriction":""}],"visibility":"Public","body":"if connection_key = Connection::CHANNELS.dig?(connection_identifier, payload.identifier.key)\nelse\n  return\nend\nconnection_key.class.to_s == payload.channel\n"}},{"html_id":"identifier-instance-method","name":"identifier","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":17,"url":null},"def":{"name":"identifier","visibility":"Public","body":"internal_identifier"}},{"html_id":"internal_identifier:String-instance-method","name":"internal_identifier","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":7,"url":null},"def":{"name":"internal_identifier","return_type":"String","visibility":"Public","body":"@internal_identifier"}},{"html_id":"internal_identifier=(internal_identifier:String)-instance-method","name":"internal_identifier=","abstract":false,"args":[{"name":"internal_identifier","external_name":"internal_identifier","restriction":"String"}],"args_string":"(internal_identifier : String)","args_html":"(internal_identifier : String)","location":{"filename":"src/cable/connection.cr","line_number":7,"url":null},"def":{"name":"internal_identifier=","args":[{"name":"internal_identifier","external_name":"internal_identifier","restriction":"String"}],"visibility":"Public","body":"@internal_identifier = internal_identifier"}},{"html_id":"message(payload:Cable::Payload)-instance-method","name":"message","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":157,"url":null},"def":{"name":"message","args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"visibility":"Public","body":"if channel = Connection::CHANNELS.dig?(connection_identifier, payload.identifier.key)\n  if payload.action?\n    Cable::Logger.info do\n      \"#{channel.class}#perform(\\\"#{payload.action}\\\", #{payload.data})\"\n    end\n    channel.perform(payload.action, payload.data)\n  else\n    begin\n      Cable::Logger.info do\n        \"#{channel.class}#receive(#{payload.data})\"\n      end\n      channel.receive(payload.data)\n    rescue e : TypeCastError\n      Cable.settings.on_error.call(e, \"Exception: #{e.message} -> #{self.class.name}#message(payload) { #{payload.inspect} }\")\n    end\n  end\nend"}},{"html_id":"receive(message:String)-instance-method","name":"receive","doc":"Convert the `message` to a proper `Payload`.\nThe `Cable::Handler` will handle catching `SerializableError`,\nand close the socket and connection","summary":"<p>Convert the <code><a href=\"../Cable/Connection.html#message%28payload%3ACable%3A%3APayload%29-instance-method\">#message</a></code> to a proper <code><a href=\"../Cable/Payload.html\">Payload</a></code>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/cable/connection.cr","line_number":97,"url":null},"def":{"name":"receive","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"if message.presence\nelse\n  return\nend\npayload = Cable::Payload.from_json(message)\nif payload.command == \"subscribe\"\n  return subscribe(payload)\nend\nif payload.command == \"unsubscribe\"\n  return unsubscribe(payload)\nend\nif payload.command == \"message\"\n  return message(payload)\nend\n"}},{"html_id":"reject(payload:Cable::Payload)-instance-method","name":"reject","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":149,"url":null},"def":{"name":"reject","args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"visibility":"Public","body":"if channel = Connection::CHANNELS[connection_identifier].delete(payload.identifier.key)\n  channel.unsubscribed\n  Cable::Logger.info do\n    \"#{channel.class} is transmitting the subscription rejection\"\n  end\n  send_message({type: Cable.message(:rejection), identifier: payload.identifier.key}.to_json)\nend"}},{"html_id":"reject_unauthorized_connection-instance-method","name":"reject_unauthorized_connection","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":90,"url":null},"def":{"name":"reject_unauthorized_connection","visibility":"Public","body":"raise(UnauthorizedConnectionException.new)"}},{"html_id":"send_message(message:String)-instance-method","name":"send_message","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/cable/connection.cr","line_number":84,"url":null},"def":{"name":"send_message","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"if closed?\n  return\nend\nsocket.send(message)\n"}},{"html_id":"socket:HTTP::WebSocket-instance-method","name":"socket","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":12,"url":null},"def":{"name":"socket","visibility":"Public","body":"@socket"}},{"html_id":"started_at:Time-instance-method","name":"started_at","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":13,"url":null},"def":{"name":"started_at","return_type":"Time","visibility":"Public","body":"@started_at"}},{"html_id":"subscribe(payload:Cable::Payload)-instance-method","name":"subscribe","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":106,"url":null},"def":{"name":"subscribe","args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"visibility":"Public","body":"if connection_requesting_duplicate_channel_subscription?(payload)\n  return\nend\nchannel = Cable::Channel::CHANNELS[payload.channel].new(connection: self, identifier: payload.identifier.key, params: payload.channel_params)\n__temp_48 = connection_identifier\n__temp_49 = Connection::CHANNELS\n__temp_49[__temp_48]? || (__temp_49[__temp_48] = {} of String => Cable::Channel)\nConnection::CHANNELS[connection_identifier][payload.identifier.key] = channel\nchannel.subscribed\nif channel.subscription_rejected?\n  reject(payload)\n  return\nend\nif stream_identifier = channel.stream_identifier\n  Cable.server.subscribe_channel(channel: channel, identifier: stream_identifier)\n  Cable::Logger.info do\n    \"#{channel.class} is streaming from #{stream_identifier}\"\n  end\nend\nCable::Logger.info do\n  \"#{payload.channel} is transmitting the subscription confirmation\"\nend\nsend_message({type: Cable.message(:confirmation), identifier: payload.identifier.key}.to_json)\nif channel.subscription_rejected?\nelse\n  channel.run_after_subscribed_callbacks\nend\n"}},{"html_id":"token:String|Nil-instance-method","name":"token","abstract":false,"location":{"filename":"src/cable/connection.cr","line_number":10,"url":null},"def":{"name":"token","return_type":"String | ::Nil","visibility":"Public","body":"@token"}},{"html_id":"unsubscribe(payload:Cable::Payload)-instance-method","name":"unsubscribe","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"args_string":"(payload : Cable::Payload)","args_html":"(payload : <a href=\"../Cable/Payload.html\">Cable::Payload</a>)","location":{"filename":"src/cable/connection.cr","line_number":141,"url":null},"def":{"name":"unsubscribe","args":[{"name":"payload","external_name":"payload","restriction":"Cable::Payload"}],"visibility":"Public","body":"if channel = Connection::CHANNELS[connection_identifier].delete(payload.identifier.key)\n  channel.close\n  Cable::Logger.info do\n    \"#{payload.channel} is transmitting the unsubscribe confirmation\"\n  end\n  send_message({type: Cable.message(:unsubscribe), identifier: payload.identifier.key}.to_json)\nend"}}],"macros":[{"html_id":"identified_by(name)-macro","name":"identified_by","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/cable/connection.cr","line_number":21,"url":null},"def":{"name":"identified_by","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"      property \n{{ name.id }}\n = \"\"\n\n      private def internal_identifier\n        @\n{{ name.id }}\n\n      \nend\n    \n"}},{"html_id":"owned_by(type_definition)-macro","name":"owned_by","abstract":false,"args":[{"name":"type_definition","external_name":"type_definition","restriction":""}],"args_string":"(type_definition)","args_html":"(type_definition)","location":{"filename":"src/cable/connection.cr","line_number":29,"url":null},"def":{"name":"owned_by","args":[{"name":"type_definition","external_name":"type_definition","restriction":""}],"visibility":"Public","body":"      property \n{{ type_definition.var }}\n : \n{{ type_definition.type }}\n?\n    \n"}}],"types":[{"html_id":"cable/Cable/Connection/UnauthorizedConnectionException","path":"Cable/Connection/UnauthorizedConnectionException.html","kind":"class","full_name":"Cable::Connection::UnauthorizedConnectionException","name":"UnauthorizedConnectionException","abstract":false,"superclass":{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/connection.cr","line_number":5,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable/Connection","kind":"class","full_name":"Cable::Connection","name":"Connection"}}]},{"html_id":"cable/Cable/Debug","path":"Cable/Debug.html","kind":"module","full_name":"Cable::Debug","name":"Debug","abstract":false,"locations":[{"filename":"src/cable/debug.cr","line_number":4,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cable/Cable/Server","kind":"class","full_name":"Cable::Server","name":"Server"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"instance_methods":[{"html_id":"debug-instance-method","name":"debug","abstract":false,"location":{"filename":"src/cable/debug.cr","line_number":44,"url":null},"def":{"name":"debug","visibility":"Public","body":"Cable::Logger.debug do\n  \"-\" * 80\nend\nCable::Logger.debug do\n  \"Some Good Information\"\nend\nCable::Logger.debug do\n  \"Connections\"\nend\n@connections.each do |k, _v|\n  Cable::Logger.debug do\n    \"Connection Key: #{k}\"\n  end\nend\nCable::Logger.debug do\n  \"Channels\"\nend\n@channels.each do |k, v|\n  Cable::Logger.debug do\n    \"Channel Key: #{k}\"\n  end\n  Cable::Logger.debug do\n    \"Channels\"\n  end\n  v.each do |channel|\n    Cable::Logger.debug do\n      \"From Channel: #{channel.connection.connection_identifier}\"\n    end\n    Cable::Logger.debug do\n      \"Params: #{channel.params}\"\n    end\n    Cable::Logger.debug do\n      \"ID: #{channel.identifier}\"\n    end\n    Cable::Logger.debug do\n      \"Stream ID:: #{channel.stream_identifier}\"\n    end\n  end\nend\nCable::Logger.debug do\n  \"-\" * 80\nend\n"}},{"html_id":"debug_json-instance-method","name":"debug_json","abstract":false,"location":{"filename":"src/cable/debug.cr","line_number":5,"url":null},"def":{"name":"debug_json","visibility":"Public","body":"_channels = {} of String => Set(String)\n@channels.each do |k, v|\n  __temp_50 = v.first.class.to_s\n  _channels[__temp_50]? || (_channels[__temp_50] = Set {k})\n  _channels[v.first.class.to_s] << k\nend\n{\"total_conn_chanels\" => Cable::Connection::CHANNELS.size, \"errors\" => @errors, \"connections\" => @connections.size, \"channels\" => @channels.size, \"channels_mounted\" => _channels, \"connections_mounted\" => @connections.map do |key, connection|\n  connections_mounted_channels = [] of Hash(String, String)\n  @channels.each do |_, v|\n    v.each do |channel|\n      if channel.connection.connection_identifier == key\n      else\n        next\n      end\n      connections_mounted_channels << {\"channel\" => channel.class.to_s, \"key\" => channel.stream_identifier.to_s, \"rejected\" => channel.subscription_rejected?.to_s}\n    end\n  end\n  {\"key\" => key, \"identifier\" => connection.identifier, \"closed\" => connection.closed?.to_s, \"rejected\" => connection.connection_rejected?.to_s, \"started_at\" => connection.started_at.to_s(\"%Y-%m-%dT%H:%M:%S.%6N\"), \"channels\" => connections_mounted_channels}\nend}\n"}}]},{"html_id":"cable/Cable/DevBackend","path":"Cable/DevBackend.html","kind":"class","full_name":"Cable::DevBackend","name":"DevBackend","abstract":false,"superclass":{"html_id":"cable/Cable/BackendCore","kind":"class","full_name":"Cable::BackendCore","name":"BackendCore"},"ancestors":[{"html_id":"cable/Cable/BackendCore","kind":"class","full_name":"Cable::BackendCore","name":"BackendCore"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/dev/backend.cr","line_number":2,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"class_methods":[{"html_id":"published_messages-class-method","name":"published_messages","doc":"Store the published `stream_identifier` and `message`","summary":"<p>Store the published <code>stream_identifier</code> and <code>message</code></p>","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":4,"url":null},"def":{"name":"published_messages","visibility":"Public","body":"@@published_messages"}},{"html_id":"reset-class-method","name":"reset","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":9,"url":null},"def":{"name":"reset","visibility":"Public","body":"@@published_messages.clear\n@@subscriptions.clear\n"}},{"html_id":"subscriptions-class-method","name":"subscriptions","doc":"Store the `stream_identifier` on `subscribe`","summary":"<p>Store the <code>stream_identifier</code> on <code><a href=\"../Cable/DevBackend.html#subscribe%28stream_identifier%3AString%29-instance-method\">#subscribe</a></code></p>","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":7,"url":null},"def":{"name":"subscriptions","visibility":"Public","body":"@@subscriptions"}}],"instance_methods":[{"html_id":"close_publish_connection-instance-method","name":"close_publish_connection","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":27,"url":null},"def":{"name":"close_publish_connection","visibility":"Public","body":""}},{"html_id":"close_subscribe_connection-instance-method","name":"close_subscribe_connection","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":24,"url":null},"def":{"name":"close_subscribe_connection","visibility":"Public","body":""}},{"html_id":"open_subscribe_connection(channel)-instance-method","name":"open_subscribe_connection","doc":"internal pub/sub","summary":"<p>internal pub/sub</p>","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":""}],"args_string":"(channel)","args_html":"(channel)","location":{"filename":"src/backend/dev/backend.cr","line_number":30,"url":null},"def":{"name":"open_subscribe_connection","args":[{"name":"channel","external_name":"channel","restriction":""}],"visibility":"Public","body":""}},{"html_id":"ping_redis_publish-instance-method","name":"ping_redis_publish","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":44,"url":null},"def":{"name":"ping_redis_publish","visibility":"Public","body":""}},{"html_id":"ping_redis_subscribe-instance-method","name":"ping_redis_subscribe","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":41,"url":null},"def":{"name":"ping_redis_subscribe","visibility":"Public","body":""}},{"html_id":"publish_connection-instance-method","name":"publish_connection","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":21,"url":null},"def":{"name":"publish_connection","visibility":"Public","body":""}},{"html_id":"publish_message(stream_identifier:String,message:String)-instance-method","name":"publish_message","doc":"external pub/sub","summary":"<p>external pub/sub</p>","abstract":false,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(stream_identifier : String, message : String)","args_html":"(stream_identifier : String, message : String)","location":{"filename":"src/backend/dev/backend.cr","line_number":14,"url":null},"def":{"name":"publish_message","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@@published_messages << {stream_identifier, message}"}},{"html_id":"subscribe(stream_identifier:String)-instance-method","name":"subscribe","doc":"channel management","summary":"<p>channel management</p>","abstract":false,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"args_string":"(stream_identifier : String)","args_html":"(stream_identifier : String)","location":{"filename":"src/backend/dev/backend.cr","line_number":33,"url":null},"def":{"name":"subscribe","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"visibility":"Public","body":"@@subscriptions << stream_identifier"}},{"html_id":"subscribe_connection-instance-method","name":"subscribe_connection","doc":"connection management","summary":"<p>connection management</p>","abstract":false,"location":{"filename":"src/backend/dev/backend.cr","line_number":18,"url":null},"def":{"name":"subscribe_connection","visibility":"Public","body":""}},{"html_id":"unsubscribe(stream_identifier:String)-instance-method","name":"unsubscribe","abstract":false,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"args_string":"(stream_identifier : String)","args_html":"(stream_identifier : String)","location":{"filename":"src/backend/dev/backend.cr","line_number":37,"url":null},"def":{"name":"unsubscribe","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"visibility":"Public","body":"@@subscriptions.delete(stream_identifier)"}}]},{"html_id":"cable/Cable/HabitatSettings","path":"Cable/HabitatSettings.html","kind":"class","full_name":"Cable::HabitatSettings","name":"HabitatSettings","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable.cr","line_number":30,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"class_methods":[{"html_id":"backend_class:Cable::BackendCore.class-class-method","name":"backend_class","abstract":false,"def":{"name":"backend_class","return_type":"Cable::BackendCore.class","visibility":"Public","body":"@@backend_class.not_nil!"}},{"html_id":"backend_class=(value:Cable::BackendCore.class)-class-method","name":"backend_class=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Cable::BackendCore.class"}],"args_string":"(value : Cable::BackendCore.class)","args_html":"(value : <span class=\"t\">Cable</span><span class=\"t\">::</span><span class=\"t\">BackendCore</span>.<span class=\"k\">class</span>)","def":{"name":"backend_class=","args":[{"name":"value","external_name":"value","restriction":"Cable::BackendCore.class"}],"visibility":"Public","body":"@@backend_class = value"}},{"html_id":"backend_class?-class-method","name":"backend_class?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use backend_class in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use backend_class in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"backend_class?","visibility":"Public","body":"@@backend_class"}},{"html_id":"disable_sec_websocket_protocol_header:Bool-class-method","name":"disable_sec_websocket_protocol_header","abstract":false,"def":{"name":"disable_sec_websocket_protocol_header","return_type":"Bool","visibility":"Public","body":"@@disable_sec_websocket_protocol_header.not_nil!"}},{"html_id":"disable_sec_websocket_protocol_header=(value:Bool)-class-method","name":"disable_sec_websocket_protocol_header=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","def":{"name":"disable_sec_websocket_protocol_header=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@@disable_sec_websocket_protocol_header = value"}},{"html_id":"disable_sec_websocket_protocol_header?-class-method","name":"disable_sec_websocket_protocol_header?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use disable_sec_websocket_protocol_header in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use disable_sec_websocket_protocol_header in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"disable_sec_websocket_protocol_header?","visibility":"Public","body":"@@disable_sec_websocket_protocol_header"}},{"html_id":"on_error:Proc(Exception,String,Nil)-class-method","name":"on_error","abstract":false,"def":{"name":"on_error","return_type":"Proc(Exception, String, Nil)","visibility":"Public","body":"@@on_error.not_nil!"}},{"html_id":"on_error=(value:Proc(Exception,String,Nil))-class-method","name":"on_error=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Proc(Exception, String, Nil)"}],"args_string":"(value : Proc(Exception, String, Nil))","args_html":"(value : Proc(Exception, String, Nil))","def":{"name":"on_error=","args":[{"name":"value","external_name":"value","restriction":"Proc(Exception, String, Nil)"}],"visibility":"Public","body":"@@on_error = value"}},{"html_id":"on_error?-class-method","name":"on_error?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use on_error in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use on_error in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"on_error?","visibility":"Public","body":"@@on_error"}},{"html_id":"pool_redis_publish:Bool-class-method","name":"pool_redis_publish","abstract":false,"def":{"name":"pool_redis_publish","return_type":"Bool","visibility":"Public","body":"@@pool_redis_publish.not_nil!"}},{"html_id":"pool_redis_publish=(value:Bool)-class-method","name":"pool_redis_publish=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","def":{"name":"pool_redis_publish=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@@pool_redis_publish = value"}},{"html_id":"pool_redis_publish?-class-method","name":"pool_redis_publish?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use pool_redis_publish in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use pool_redis_publish in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"pool_redis_publish?","visibility":"Public","body":"@@pool_redis_publish"}},{"html_id":"redis_ping_interval:Time::Span-class-method","name":"redis_ping_interval","abstract":false,"def":{"name":"redis_ping_interval","return_type":"Time::Span","visibility":"Public","body":"@@redis_ping_interval.not_nil!"}},{"html_id":"redis_ping_interval=(value:Time::Span)-class-method","name":"redis_ping_interval=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"args_string":"(value : Time::Span)","args_html":"(value : Time::Span)","def":{"name":"redis_ping_interval=","args":[{"name":"value","external_name":"value","restriction":"Time::Span"}],"visibility":"Public","body":"@@redis_ping_interval = value"}},{"html_id":"redis_ping_interval?-class-method","name":"redis_ping_interval?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use redis_ping_interval in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use redis_ping_interval in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"redis_ping_interval?","visibility":"Public","body":"@@redis_ping_interval"}},{"html_id":"redis_pool_size:Int32-class-method","name":"redis_pool_size","abstract":false,"def":{"name":"redis_pool_size","return_type":"Int32","visibility":"Public","body":"@@redis_pool_size.not_nil!"}},{"html_id":"redis_pool_size=(value:Int32)-class-method","name":"redis_pool_size=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","def":{"name":"redis_pool_size=","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"visibility":"Public","body":"@@redis_pool_size = value"}},{"html_id":"redis_pool_size?-class-method","name":"redis_pool_size?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use redis_pool_size in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use redis_pool_size in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"redis_pool_size?","visibility":"Public","body":"@@redis_pool_size"}},{"html_id":"redis_pool_timeout:Float64-class-method","name":"redis_pool_timeout","abstract":false,"def":{"name":"redis_pool_timeout","return_type":"Float64","visibility":"Public","body":"@@redis_pool_timeout.not_nil!"}},{"html_id":"redis_pool_timeout=(value:Float64)-class-method","name":"redis_pool_timeout=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64)","args_html":"(value : Float64)","def":{"name":"redis_pool_timeout=","args":[{"name":"value","external_name":"value","restriction":"Float64"}],"visibility":"Public","body":"@@redis_pool_timeout = value"}},{"html_id":"redis_pool_timeout?-class-method","name":"redis_pool_timeout?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use redis_pool_timeout in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use redis_pool_timeout in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"redis_pool_timeout?","visibility":"Public","body":"@@redis_pool_timeout"}},{"html_id":"restart_error_allowance:Int32-class-method","name":"restart_error_allowance","abstract":false,"def":{"name":"restart_error_allowance","return_type":"Int32","visibility":"Public","body":"@@restart_error_allowance.not_nil!"}},{"html_id":"restart_error_allowance=(value:Int32)-class-method","name":"restart_error_allowance=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","def":{"name":"restart_error_allowance=","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"visibility":"Public","body":"@@restart_error_allowance = value"}},{"html_id":"restart_error_allowance?-class-method","name":"restart_error_allowance?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use restart_error_allowance in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use restart_error_allowance in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"restart_error_allowance?","visibility":"Public","body":"@@restart_error_allowance"}},{"html_id":"route:String-class-method","name":"route","abstract":false,"def":{"name":"route","return_type":"String","visibility":"Public","body":"@@route.not_nil!"}},{"html_id":"route=(value:String)-class-method","name":"route=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"route=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"@@route = value"}},{"html_id":"route?-class-method","name":"route?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use route in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use route in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"route?","visibility":"Public","body":"@@route"}},{"html_id":"to_h-class-method","name":"to_h","doc":"Generates a hash using the provided values","summary":"<p>Generates a hash using the provided values</p>","abstract":false,"def":{"name":"to_h","visibility":"Public","body":"{\"route\" => route, \"token\" => token, \"url\" => url, \"disable_sec_websocket_protocol_header\" => disable_sec_websocket_protocol_header, \"backend_class\" => backend_class, \"redis_ping_interval\" => redis_ping_interval, \"restart_error_allowance\" => restart_error_allowance, \"on_error\" => on_error, \"pool_redis_publish\" => pool_redis_publish, \"redis_pool_size\" => redis_pool_size, \"redis_pool_timeout\" => redis_pool_timeout}"}},{"html_id":"token:String-class-method","name":"token","abstract":false,"def":{"name":"token","return_type":"String","visibility":"Public","body":"@@token.not_nil!"}},{"html_id":"token=(value:String)-class-method","name":"token=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"token=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"@@token = value"}},{"html_id":"token?-class-method","name":"token?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use token in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use token in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"token?","visibility":"Public","body":"@@token"}},{"html_id":"url:String-class-method","name":"url","abstract":false,"def":{"name":"url","return_type":"String","visibility":"Public","body":"@@url.not_nil!"}},{"html_id":"url=(value:String)-class-method","name":"url=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(value : String)","args_html":"(value : String)","def":{"name":"url=","args":[{"name":"value","external_name":"value","restriction":"String"}],"visibility":"Public","body":"@@url = value"}},{"html_id":"url?-class-method","name":"url?","doc":"Used for checking missing settings on non-nilable types\nIt's advised to use url in your apps to ensure\nthe propper type is checked.","summary":"<p>Used for checking missing settings on non-nilable types It's advised to use url in your apps to ensure the propper type is checked.</p>","abstract":false,"def":{"name":"url?","visibility":"Public","body":"@@url"}}]},{"html_id":"cable/Cable/Handler","path":"Cable/Handler.html","kind":"class","full_name":"Cable::Handler(T)","name":"Handler","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/handler.cr","line_number":4,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cable/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"instance_methods":[{"html_id":"call(context)-instance-method","name":"call","abstract":false,"args":[{"name":"context","external_name":"context","restriction":""}],"args_string":"(context)","args_html":"(context)","location":{"filename":"src/cable/handler.cr","line_number":7,"url":null},"def":{"name":"call","args":[{"name":"context","external_name":"context","restriction":""}],"visibility":"Public","body":"if (ws_route_found?(context)) && (websocket_upgrade_request?(context))\nelse\n  return call_next(context)\nend\nremote_address = context.request.remote_address\npath = context.request.path\nCable::Logger.info do\n  \"Started GET \\\"#{path}\\\" [WebSocket] for #{remote_address} at #{Time.utc}\"\nend\nif Cable.settings.disable_sec_websocket_protocol_header\nelse\n  context.response.headers[\"Sec-WebSocket-Protocol\"] = \"actioncable-v1-json\"\nend\nws = HTTP::WebSocketHandler.new do |socket, ws_ctx|\n  begin\n    connection = T.new(ws_ctx.request, socket)\n    if connection.closed? || connection.connection_rejected?\n      next\n    end\n    connection_id = connection.connection_identifier\n    Cable.server.add_connection(connection)\n    connection.send_message({type: Cable.message(:welcome)}.to_json)\n    ws_pinger = Cable::WebsocketPinger.build(socket)\n    socket.on_ping do\n      socket.pong(ws_ctx.request.path)\n      Cable::Logger.debug do\n        \"Ping received\"\n      end\n    end\n    socket.on_message do |message|\n      begin\n        connection.receive(message)\n      rescue e : KeyError | JSON::ParseException | JSON::SerializableError\n        ws_pinger.stop\n        socket.close(HTTP::WebSocket::CloseCode::InvalidFramePayloadData, \"Invalid message\")\n        Cable.server.remove_connection(connection_id)\n        Cable.settings.on_error.call(e, \"Cable::Handler#socket.on_message\")\n      rescue e : Cable::Connection::UnauthorizedConnectionException\n        ws_pinger.stop\n        socket.close(HTTP::WebSocket::CloseCode::NormalClosure, \"Farewell\")\n        Cable.server.remove_connection(connection_id)\n      rescue e : Exception\n        ws_pinger.stop\n        socket.close(HTTP::WebSocket::CloseCode::InternalServerError, \"Internal Server Error\")\n        Cable.server.remove_connection(connection_id)\n        Cable.server.count_error!\n        if Cable.server.restart?\n          Cable.restart\n        end\n        Cable.settings.on_error.call(e, \"Cable::Handler#socket.on_message\")\n      end\n    end\n    socket.on_close do\n      ws_pinger.stop\n      Cable.server.remove_connection(connection_id)\n      Cable::Logger.info do\n        \"Finished \\\"#{path}\\\" [WebSocket] for #{remote_address} at #{Time.utc}\"\n      end\n    end\n  rescue e : Exception\n    Cable.settings.on_error.call(e, \"Cable::Handler#call -> HTTP::WebSocketHandler\")\n    raise(e)\n  end\nend\nCable::Logger.info do\n  \"Successfully upgraded to WebSocket (REQUEST_METHOD: GET, HTTP_CONNECTION: Upgrade, HTTP_UPGRADE: websocket)\"\nend\nws.call(context)\n"}}]},{"html_id":"cable/Cable/Payload","path":"Cable/Payload.html","kind":"struct","full_name":"Cable::Payload","name":"Payload","abstract":false,"superclass":{"html_id":"cable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cable/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"cable/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"cable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cable/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/payload.cr","line_number":2,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cable/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"cable/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/cable/payload.cr","line_number":3,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"action:String-instance-method","name":"action","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":40,"url":null},"def":{"name":"action","return_type":"String","visibility":"Public","body":"@action"}},{"html_id":"action?:Bool-instance-method","name":"action?","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":52,"url":null},"def":{"name":"action?","return_type":"Bool","visibility":"Public","body":"!action.presence.nil?"}},{"html_id":"after_initialize-instance-method","name":"after_initialize","doc":"After the Payload is deserialized, parse the data.\nThis will ensure we know if it's an action.","summary":"<p>After the Payload is deserialized, parse the data.</p>","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":44,"url":null},"def":{"name":"after_initialize","visibility":"Public","body":"data"}},{"html_id":"channel:String-instance-method","name":"channel","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":48,"url":null},"def":{"name":"channel","return_type":"String","visibility":"Public","body":"identifier.channel"}},{"html_id":"channel_params:Hash(String,RESULT)-instance-method","name":"channel_params","doc":"These are the additional data sent with the identifier\ne.g. `{channel: \"RoomChannel\", room_id: 1}`\n```\nchannel_params[\"room_id\"] # => 1\n```","summary":"<p>These are the additional data sent with the identifier e.g.</p>","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":64,"url":null},"def":{"name":"channel_params","return_type":"Hash(String, RESULT)","visibility":"Public","body":"if @_channel_params.nil?\n  @_channel_params = process_hash(identifier.json_unmapped)\nelse\n  @_channel_params.as(Hash(String, RESULT))\nend"}},{"html_id":"command:String-instance-method","name":"command","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":34,"url":null},"def":{"name":"command","return_type":"String","visibility":"Public","body":"@command"}},{"html_id":"data:Hash(String,RESULT)-instance-method","name":"data","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":75,"url":null},"def":{"name":"data","return_type":"Hash(String, RESULT)","visibility":"Public","body":"if @_data.nil?\n  if unmapped_data = json_unmapped[\"data\"]?.try(&.as_s?)\n    @_data = process_data(unmapped_data)\n  else\n    @_data = no_data\n  end\nelse\n  @_data.as(Hash(String, RESULT))\nend"}},{"html_id":"identifier:Indentifier-instance-method","name":"identifier","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":37,"url":null},"def":{"name":"identifier","return_type":"Indentifier","visibility":"Public","body":"@identifier"}}],"types":[{"html_id":"cable/Cable/Payload/IdentifierConverter","path":"Cable/Payload/IdentifierConverter.html","kind":"module","full_name":"Cable::Payload::IdentifierConverter","name":"IdentifierConverter","abstract":false,"locations":[{"filename":"src/cable/payload.cr","line_number":8,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable/Payload","kind":"struct","full_name":"Cable::Payload","name":"Payload"},"class_methods":[{"html_id":"from_json(value:JSON::PullParser):Indentifier-class-method","name":"from_json","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"JSON::PullParser"}],"args_string":"(value : JSON::PullParser) : Indentifier","args_html":"(value : JSON::PullParser) : <a href=\"../../Cable/Payload/Indentifier.html\">Indentifier</a>","location":{"filename":"src/cable/payload.cr","line_number":9,"url":null},"def":{"name":"from_json","args":[{"name":"value","external_name":"value","restriction":"JSON::PullParser"}],"return_type":"Indentifier","visibility":"Public","body":"key = value.read_string\ni = Indentifier.from_json(key)\ni.key = key\ni\n"}},{"html_id":"to_json(value:Indentifier,json:JSON::Builder):Nil-class-method","name":"to_json","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Indentifier"},{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(value : Indentifier, json : JSON::Builder) : Nil","args_html":"(value : <a href=\"../../Cable/Payload/Indentifier.html\">Indentifier</a>, json : JSON::Builder) : Nil","location":{"filename":"src/cable/payload.cr","line_number":16,"url":null},"def":{"name":"to_json","args":[{"name":"value","external_name":"value","restriction":"Indentifier"},{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"return_type":"Nil","visibility":"Public","body":"json.string(value.key)"}}]},{"html_id":"cable/Cable/Payload/Indentifier","path":"Cable/Payload/Indentifier.html","kind":"struct","full_name":"Cable::Payload::Indentifier","name":"Indentifier","abstract":false,"superclass":{"html_id":"cable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cable/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"cable/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"cable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cable/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/payload.cr","line_number":21,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cable/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"cable/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"}],"namespace":{"html_id":"cable/Cable/Payload","kind":"struct","full_name":"Cable::Payload","name":"Payload"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/cable/payload.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"channel:String-instance-method","name":"channel","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":25,"url":null},"def":{"name":"channel","return_type":"String","visibility":"Public","body":"@channel"}},{"html_id":"channel=(channel:String)-instance-method","name":"channel=","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"String"}],"args_string":"(channel : String)","args_html":"(channel : String)","location":{"filename":"src/cable/payload.cr","line_number":25,"url":null},"def":{"name":"channel=","args":[{"name":"channel","external_name":"channel","restriction":"String"}],"visibility":"Public","body":"@channel = channel"}},{"html_id":"key:String-instance-method","name":"key","abstract":false,"location":{"filename":"src/cable/payload.cr","line_number":30,"url":null},"def":{"name":"key","return_type":"String","visibility":"Public","body":"@key"}},{"html_id":"key=(key:String)-instance-method","name":"key=","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String)","args_html":"(key : String)","location":{"filename":"src/cable/payload.cr","line_number":30,"url":null},"def":{"name":"key=","args":[{"name":"key","external_name":"key","restriction":"String"}],"visibility":"Public","body":"@key = key"}}]},{"html_id":"cable/Cable/Payload/PARAMS","path":"Cable/Payload/PARAMS.html","kind":"alias","full_name":"Cable::Payload::PARAMS","name":"PARAMS","abstract":false,"locations":[{"filename":"src/cable/payload.cr","line_number":6,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":true,"aliased":"Hash(String, Cable::Payload::RESULT)","aliased_html":"Hash(String, <a href=\"../../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>)","const":false,"namespace":{"html_id":"cable/Cable/Payload","kind":"struct","full_name":"Cable::Payload","name":"Payload"}},{"html_id":"cable/Cable/Payload/RESULT","path":"Cable/Payload/RESULT.html","kind":"alias","full_name":"Cable::Payload::RESULT","name":"RESULT","abstract":false,"locations":[{"filename":"src/cable/payload.cr","line_number":5,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":true,"aliased":"(Hash(String, Cable::Payload::RESULT) | Int64 | String)","aliased_html":"Hash(String, <a href=\"../../Cable/Payload/RESULT.html\">Cable::Payload::RESULT</a>) | Int64 | String","const":false,"namespace":{"html_id":"cable/Cable/Payload","kind":"struct","full_name":"Cable::Payload","name":"Payload"}}]},{"html_id":"cable/Cable/RedisBackend","path":"Cable/RedisBackend.html","kind":"class","full_name":"Cable::RedisBackend","name":"RedisBackend","abstract":false,"superclass":{"html_id":"cable/Cable/BackendCore","kind":"class","full_name":"Cable::BackendCore","name":"BackendCore"},"ancestors":[{"html_id":"cable/Cable/BackendCore","kind":"class","full_name":"Cable::BackendCore","name":"BackendCore"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/redis/backend.cr","line_number":2,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"instance_methods":[{"html_id":"close_publish_connection-instance-method","name":"close_publish_connection","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":23,"url":null},"def":{"name":"close_publish_connection","visibility":"Public","body":"if redis_publish.nil?\n  return\nend\nredis_publish.close\n"}},{"html_id":"close_subscribe_connection-instance-method","name":"close_subscribe_connection","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":16,"url":null},"def":{"name":"close_subscribe_connection","visibility":"Public","body":"if redis_subscribe.nil?\n  return\nend\nredis_subscribe.unsubscribe\nredis_subscribe.close\n"}},{"html_id":"open_subscribe_connection(channel)-instance-method","name":"open_subscribe_connection","doc":"internal pub/sub","summary":"<p>internal pub/sub</p>","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":""}],"args_string":"(channel)","args_html":"(channel)","location":{"filename":"src/backend/redis/backend.cr","line_number":30,"url":null},"def":{"name":"open_subscribe_connection","args":[{"name":"channel","external_name":"channel","restriction":""}],"visibility":"Public","body":"if redis_subscribe.nil?\n  return\nend\nredis_subscribe.subscribe(channel) do |subscription|\n  subscription.on_message do |sub_channel, message|\n    if (sub_channel == Cable::INTERNAL[:channel]) && (message == \"ping\")\n      Cable::Logger.debug do\n        \"Cable::Server#subscribe -> PONG\"\n      end\n    else\n      if (sub_channel == Cable::INTERNAL[:channel]) && (message == \"debug\")\n        Cable.server.debug\n      else\n        Cable.server.fiber_channel.send({sub_channel, message})\n        Cable::Logger.debug do\n          \"Cable::Server#subscribe channel:#{sub_channel} message:#{message}\"\n        end\n      end\n    end\n  end\nend\n"}},{"html_id":"ping_redis_publish-instance-method","name":"ping_redis_publish","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":79,"url":null},"def":{"name":"ping_redis_publish","visibility":"Public","body":"result = redis_publish.run({\"ping\"})\nCable::Logger.debug do\n  \"Cable::RedisPinger.ping_redis_publish -> #{result}\"\nend\n"}},{"html_id":"ping_redis_subscribe-instance-method","name":"ping_redis_subscribe","doc":"since @server.redis_subscribe connection is called on a block loop\nwe basically cannot call ping outside of the block\ninstead, we just spin up another new redis connection\nthen publish a special channel/message broadcast\nthe @server.redis_subscribe picks up this special combination\nand calls ping on the block loop for us","summary":"<p>since @server.redis_subscribe connection is called on a block loop we basically cannot call ping outside of the block instead, we just spin up another new redis connection then publish a special channel/message broadcast the @server.redis_subscribe picks up this special combination and calls ping on the block loop for us</p>","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":75,"url":null},"def":{"name":"ping_redis_subscribe","visibility":"Public","body":"Cable.server.publish(Cable::INTERNAL[:channel], \"ping\")"}},{"html_id":"publish_connection:Redis::Client-instance-method","name":"publish_connection","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":12,"url":null},"def":{"name":"publish_connection","return_type":"Redis::Client","visibility":"Public","body":"redis_publish"}},{"html_id":"publish_message(stream_identifier:String,message:String)-instance-method","name":"publish_message","doc":"external pub/sub","summary":"<p>external pub/sub</p>","abstract":false,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(stream_identifier : String, message : String)","args_html":"(stream_identifier : String, message : String)","location":{"filename":"src/backend/redis/backend.cr","line_number":48,"url":null},"def":{"name":"publish_message","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"if redis_subscribe.nil?\n  return\nend\nredis_publish.publish(stream_identifier, message)\n"}},{"html_id":"redis_publish:Redis::Client-instance-method","name":"redis_publish","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":5,"url":null},"def":{"name":"redis_publish","return_type":"Redis::Client","visibility":"Public","body":"@redis_publish"}},{"html_id":"redis_subscribe:Redis::Connection-instance-method","name":"redis_subscribe","doc":"connection management","summary":"<p>connection management</p>","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":4,"url":null},"def":{"name":"redis_subscribe","return_type":"Redis::Connection","visibility":"Public","body":"@redis_subscribe"}},{"html_id":"subscribe(stream_identifier:String)-instance-method","name":"subscribe","doc":"channel management","summary":"<p>channel management</p>","abstract":false,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"args_string":"(stream_identifier : String)","args_html":"(stream_identifier : String)","location":{"filename":"src/backend/redis/backend.cr","line_number":55,"url":null},"def":{"name":"subscribe","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"visibility":"Public","body":"if redis_subscribe.nil?\n  return\nend\nredis_subscribe.subscribe(stream_identifier)\n"}},{"html_id":"subscribe_connection:Redis::Connection-instance-method","name":"subscribe_connection","doc":"connection management","summary":"<p>connection management</p>","abstract":false,"location":{"filename":"src/backend/redis/backend.cr","line_number":8,"url":null},"def":{"name":"subscribe_connection","return_type":"Redis::Connection","visibility":"Public","body":"redis_subscribe"}},{"html_id":"unsubscribe(stream_identifier:String)-instance-method","name":"unsubscribe","abstract":false,"args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"args_string":"(stream_identifier : String)","args_html":"(stream_identifier : String)","location":{"filename":"src/backend/redis/backend.cr","line_number":61,"url":null},"def":{"name":"unsubscribe","args":[{"name":"stream_identifier","external_name":"stream_identifier","restriction":"String"}],"visibility":"Public","body":"if redis_subscribe.nil?\n  return\nend\nredis_subscribe.unsubscribe(stream_identifier)\n"}}]},{"html_id":"cable/Cable/RedisPinger","path":"Cable/RedisPinger.html","kind":"class","full_name":"Cable::RedisPinger","name":"RedisPinger","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/redis_pinger.cr","line_number":4,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"constructors":[{"html_id":"new(server:Cable::Server)-class-method","name":"new","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"Cable::Server"}],"args_string":"(server : Cable::Server)","args_html":"(server : <a href=\"../Cable/Server.html\">Cable::Server</a>)","location":{"filename":"src/cable/redis_pinger.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"server","external_name":"server","restriction":"Cable::Server"}],"visibility":"Public","body":"_ = allocate\n_.initialize(server)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"stop-instance-method","name":"stop","abstract":false,"location":{"filename":"src/cable/redis_pinger.cr","line_number":20,"url":null},"def":{"name":"stop","visibility":"Public","body":"@task.cancel"}}]},{"html_id":"cable/Cable/RemoteConnections","path":"Cable/RemoteConnections.html","kind":"class","full_name":"Cable::RemoteConnections","name":"RemoteConnections","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/remote_connections.cr","line_number":2,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"constructors":[{"html_id":"new(server:Cable::Server)-class-method","name":"new","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"Cable::Server"}],"args_string":"(server : Cable::Server)","args_html":"(server : <a href=\"../Cable/Server.html\">Cable::Server</a>)","location":{"filename":"src/cable/remote_connections.cr","line_number":3,"url":null},"def":{"name":"new","args":[{"name":"server","external_name":"server","restriction":"Cable::Server"}],"visibility":"Public","body":"_ = allocate\n_.initialize(server)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"find(identifier:String):RemoteConnection-instance-method","name":"find","doc":"Specify the value of your connection's `identified_by`\n```\n# e.g.\n# identified_by :user_id\n# self.user_id = 1234.to_s\n\nfind(\"1234\")\n```\nNOTE: This code may run on a different machine than where the `@server.connections`\nis actually sitting in memory. For this reason, we just pass the value right through\nthe backend (i.e. redis), and let that broadcast out to all running instances.","summary":"<p>Specify the value of your connection's <code>identified_by</code> ``` # e.g.</p>","abstract":false,"args":[{"name":"identifier","external_name":"identifier","restriction":"String"}],"args_string":"(identifier : String) : RemoteConnection","args_html":"(identifier : String) : RemoteConnection","location":{"filename":"src/cable/remote_connections.cr","line_number":17,"url":null},"def":{"name":"find","args":[{"name":"identifier","external_name":"identifier","restriction":"String"}],"return_type":"RemoteConnection","visibility":"Public","body":"RemoteConnection.new(@server, identifier)"}}]},{"html_id":"cable/Cable/Server","path":"Cable/Server.html","kind":"class","full_name":"Cable::Server","name":"Server","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Cable/Debug","kind":"module","full_name":"Cable::Debug","name":"Debug"},{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/server.cr","line_number":23,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cable/Cable/Debug","kind":"module","full_name":"Cable::Debug","name":"Debug"}],"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":46,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"active_connections_for(token:String):Array(Connection)-instance-method","name":"active_connections_for","doc":"Only returns connections opened on this instance.","summary":"<p>Only returns connections opened on this instance.</p>","abstract":false,"args":[{"name":"token","external_name":"token","restriction":"String"}],"args_string":"(token : String) : Array(Connection)","args_html":"(token : String) : Array(<a href=\"../Cable/Connection.html\">Connection</a>)","location":{"filename":"src/cable/server.cr","line_number":78,"url":null},"def":{"name":"active_connections_for","args":[{"name":"token","external_name":"token","restriction":"String"}],"return_type":"Array(Connection)","visibility":"Public","body":"connections.values.select do |connection|\n  (connection.token == token) && (!connection.closed?)\nend"}},{"html_id":"add_connection(connection)-instance-method","name":"add_connection","abstract":false,"args":[{"name":"connection","external_name":"connection","restriction":""}],"args_string":"(connection)","args_html":"(connection)","location":{"filename":"src/cable/server.cr","line_number":65,"url":null},"def":{"name":"add_connection","args":[{"name":"connection","external_name":"connection","restriction":""}],"visibility":"Public","body":"connections[connection.connection_identifier] = connection"}},{"html_id":"backend:Cable::BackendCore-instance-method","name":"backend","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":33,"url":null},"def":{"name":"backend","return_type":"Cable::BackendCore","visibility":"Public","body":"if (value = @backend).nil?\n  @backend = (Cable.settings.backend_class.new)\nelse\n  value\nend"}},{"html_id":"backend_publish-instance-method","name":"backend_publish","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":36,"url":null},"def":{"name":"backend_publish","visibility":"Public","body":"if (value = @backend_publish).nil?\n  @backend_publish = (backend.publish_connection)\nelse\n  value\nend"}},{"html_id":"backend_subscribe-instance-method","name":"backend_subscribe","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":39,"url":null},"def":{"name":"backend_subscribe","visibility":"Public","body":"if (value = @backend_subscribe).nil?\n  @backend_subscribe = (backend.subscribe_connection)\nelse\n  value\nend"}},{"html_id":"connections:Hash(String,Cable::Connection)-instance-method","name":"connections","doc":"The String key is the `connection_identifier` value for `Cable::Connection`","summary":"<p>The String key is the <code>connection_identifier</code> value for <code><a href=\"../Cable/Connection.html\">Cable::Connection</a></code></p>","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":27,"url":null},"def":{"name":"connections","visibility":"Public","body":"@connections"}},{"html_id":"count_error!-instance-method","name":"count_error!","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":184,"url":null},"def":{"name":"count_error!","visibility":"Public","body":"@channel_mutex.synchronize do\n  @errors = @errors + 1\nend"}},{"html_id":"errors:Int32-instance-method","name":"errors","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":28,"url":null},"def":{"name":"errors","visibility":"Public","body":"@errors"}},{"html_id":"fiber_channel:Channel({String,String})-instance-method","name":"fiber_channel","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":29,"url":null},"def":{"name":"fiber_channel","visibility":"Public","body":"@fiber_channel"}},{"html_id":"pinger:Cable::RedisPinger-instance-method","name":"pinger","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":30,"url":null},"def":{"name":"pinger","return_type":"Cable::RedisPinger","visibility":"Public","body":"if (value = @pinger).nil?\n  @pinger = (Cable::RedisPinger.new(self))\nelse\n  value\nend"}},{"html_id":"publish(channel:String,message:String)-instance-method","name":"publish","doc":"redis only accepts strings, so we should be strict here","summary":"<p>redis only accepts strings, so we should be strict here</p>","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","args_html":"(channel : String, message : String)","location":{"filename":"src/cable/server.cr","line_number":116,"url":null},"def":{"name":"publish","args":[{"name":"channel","external_name":"channel","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"backend.publish_message(channel, message)"}},{"html_id":"remote_connections-instance-method","name":"remote_connections","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":61,"url":null},"def":{"name":"remote_connections","visibility":"Public","body":"RemoteConnections.new(self)"}},{"html_id":"remove_connection(connection_id)-instance-method","name":"remove_connection","abstract":false,"args":[{"name":"connection_id","external_name":"connection_id","restriction":""}],"args_string":"(connection_id)","args_html":"(connection_id)","location":{"filename":"src/cable/server.cr","line_number":69,"url":null},"def":{"name":"remove_connection","args":[{"name":"connection_id","external_name":"connection_id","restriction":""}],"visibility":"Public","body":"(connections.delete(connection_id)).try(&.close)"}},{"html_id":"restart?-instance-method","name":"restart?","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":180,"url":null},"def":{"name":"restart?","visibility":"Public","body":"errors > Cable.settings.restart_error_allowance"}},{"html_id":"safe_decode_message(message)-instance-method","name":"safe_decode_message","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""}],"args_string":"(message)","args_html":"(message)","location":{"filename":"src/cable/server.cr","line_number":155,"url":null},"def":{"name":"safe_decode_message","args":[{"name":"message","external_name":"message","restriction":""}],"visibility":"Public","body":"begin\n  case message\n  when String\n    JSON.parse(message)\n  else\n    message\n  end\nrescue JSON::ParseException\n  message\nend"}},{"html_id":"send_to_channels(channel_identifier,message)-instance-method","name":"send_to_channels","abstract":false,"args":[{"name":"channel_identifier","external_name":"channel_identifier","restriction":""},{"name":"message","external_name":"message","restriction":""}],"args_string":"(channel_identifier, message)","args_html":"(channel_identifier, message)","location":{"filename":"src/cable/server.cr","line_number":120,"url":null},"def":{"name":"send_to_channels","args":[{"name":"channel_identifier","external_name":"channel_identifier","restriction":""},{"name":"message","external_name":"message","restriction":""}],"visibility":"Public","body":"if @channels.has_key?(channel_identifier)\nelse\n  return\nend\nparsed_message = safe_decode_message(message)\nbegin\n  @channels[channel_identifier].each do |channel|\n    if channel.connection.closed?\n      channel.close\n    else\n      Cable::Logger.info do\n        \"#{channel.class} transmitting #{parsed_message} (via streamed from #{channel.stream_identifier})\"\n      end\n      channel.connection.socket.send({identifier: channel.identifier, message: parsed_message}.to_json)\n    end\n  end\nrescue e : IO::Error\n  Cable.settings.on_error.call(e, \"IO::Error Exception: #{e.message}: #{parsed_message} -> Cable::Server#send_to_channels(channel, message)\")\nend\n"}},{"html_id":"send_to_internal_connections(connection_identifier:String,message:String)-instance-method","name":"send_to_internal_connections","abstract":false,"args":[{"name":"connection_identifier","external_name":"connection_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(connection_identifier : String, message : String)","args_html":"(connection_identifier : String, message : String)","location":{"filename":"src/cable/server.cr","line_number":144,"url":null},"def":{"name":"send_to_internal_connections","args":[{"name":"connection_identifier","external_name":"connection_identifier","restriction":"String"},{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"if internal_connection = connections[connection_identifier]?\n  case message\n  when Cable.message(:disconnect)\n    Cable::Logger.info do\n      \"Removing connection (#{connection_identifier})\"\n    end\n    internal_connection.close\n    remove_connection(connection_identifier)\n  end\nend"}},{"html_id":"shutdown-instance-method","name":"shutdown","abstract":false,"location":{"filename":"src/cable/server.cr","line_number":166,"url":null},"def":{"name":"shutdown","visibility":"Public","body":"begin\n  backend.close_subscribe_connection\n  backend.close_publish_connection\nrescue e : IO::Error\n  Cable::Logger.debug do\n    \"Cable::Server#shutdown Connection to redis was severed: #{e.message}\"\n  end\nend\npinger.stop\nconnections.each do |_k, v|\n  v.close\nend\n"}},{"html_id":"subscribe_channel(channel:Channel,identifier:String)-instance-method","name":"subscribe_channel","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"Channel"},{"name":"identifier","external_name":"identifier","restriction":"String"}],"args_string":"(channel : Channel, identifier : String)","args_html":"(channel : <a href=\"../Cable/Channel.html\">Channel</a>, identifier : String)","location":{"filename":"src/cable/server.cr","line_number":87,"url":null},"def":{"name":"subscribe_channel","args":[{"name":"channel","external_name":"channel","restriction":"Channel"},{"name":"identifier","external_name":"identifier","restriction":"String"}],"visibility":"Public","body":"@channel_mutex.synchronize do\n  if !(@channels.has_key?(identifier))\n    @channels[identifier] = Channels.new\n  end\n  @channels[identifier] << channel\nend\nbackend.subscribe(identifier)\n"}},{"html_id":"subscribed_channels_for(token:String):Array(Channel)-instance-method","name":"subscribed_channels_for","doc":"Only returns channel subscriptions opened on this instance.","summary":"<p>Only returns channel subscriptions opened on this instance.</p>","abstract":false,"args":[{"name":"token","external_name":"token","restriction":"String"}],"args_string":"(token : String) : Array(Channel)","args_html":"(token : String) : Array(<a href=\"../Cable/Channel.html\">Channel</a>)","location":{"filename":"src/cable/server.cr","line_number":83,"url":null},"def":{"name":"subscribed_channels_for","args":[{"name":"token","external_name":"token","restriction":"String"}],"return_type":"Array(Channel)","visibility":"Public","body":"(active_connections_for(token)).sum(&.channels)"}},{"html_id":"unsubscribe_channel(channel:Channel,identifier:String)-instance-method","name":"unsubscribe_channel","abstract":false,"args":[{"name":"channel","external_name":"channel","restriction":"Channel"},{"name":"identifier","external_name":"identifier","restriction":"String"}],"args_string":"(channel : Channel, identifier : String)","args_html":"(channel : <a href=\"../Cable/Channel.html\">Channel</a>, identifier : String)","location":{"filename":"src/cable/server.cr","line_number":99,"url":null},"def":{"name":"unsubscribe_channel","args":[{"name":"channel","external_name":"channel","restriction":"Channel"},{"name":"identifier","external_name":"identifier","restriction":"String"}],"visibility":"Public","body":"@channel_mutex.synchronize do\n  if @channels.has_key?(identifier)\n    @channels[identifier].delete(channel)\n    if @channels[identifier].size == 0\n      backend.unsubscribe(identifier)\n      @channels.delete(identifier)\n    end\n  else\n    backend.unsubscribe(identifier)\n  end\nend"}}]},{"html_id":"cable/Cable/WebsocketPinger","path":"Cable/WebsocketPinger.html","kind":"class","full_name":"Cable::WebsocketPinger","name":"WebsocketPinger","abstract":false,"superclass":{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cable/websocket_pinger.cr","line_number":4,"url":null}],"repository_name":"cable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cable/Cable","kind":"module","full_name":"Cable","name":"Cable"},"class_methods":[{"html_id":"build(socket:HTTP::WebSocket)-class-method","name":"build","abstract":false,"args":[{"name":"socket","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(socket : HTTP::WebSocket)","args_html":"(socket : HTTP::WebSocket)","location":{"filename":"src/cable/websocket_pinger.cr","line_number":16,"url":null},"def":{"name":"build","args":[{"name":"socket","external_name":"socket","restriction":"HTTP::WebSocket"}],"visibility":"Public","body":"self.new(socket)"}},{"html_id":"run_every(value:Int32|Float64,&)-class-method","name":"run_every","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32 | Float64"}],"args_string":"(value : Int32 | Float64, &)","args_html":"(value : Int32 | Float64, &)","location":{"filename":"src/cable/websocket_pinger.cr","line_number":8,"url":null},"def":{"name":"run_every","args":[{"name":"value","external_name":"value","restriction":"Int32 | Float64"}],"yields":0,"block_arity":0,"visibility":"Public","body":"@@seconds = value\nyield\n@@seconds = 3\n"}},{"html_id":"seconds-class-method","name":"seconds","abstract":false,"location":{"filename":"src/cable/websocket_pinger.cr","line_number":20,"url":null},"def":{"name":"seconds","visibility":"Public","body":"@@seconds"}}],"constructors":[{"html_id":"new(socket:HTTP::WebSocket)-class-method","name":"new","abstract":false,"args":[{"name":"socket","external_name":"socket","restriction":"HTTP::WebSocket"}],"args_string":"(socket : HTTP::WebSocket)","args_html":"(socket : HTTP::WebSocket)","location":{"filename":"src/cable/websocket_pinger.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"socket","external_name":"socket","restriction":"HTTP::WebSocket"}],"visibility":"Public","body":"_ = allocate\n_.initialize(socket)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"stop:Nil-instance-method","name":"stop","abstract":false,"location":{"filename":"src/cable/websocket_pinger.cr","line_number":31,"url":null},"def":{"name":"stop","return_type":"Nil","visibility":"Public","body":"@task.cancel"}}]}]}]}}